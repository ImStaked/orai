// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provider/types/tx_tcase.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateTestCase submit test case metadata onto Oraichain
type MsgCreateTestCase struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the test case.
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees  string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
}

func (m *MsgCreateTestCase) Reset()         { *m = MsgCreateTestCase{} }
func (m *MsgCreateTestCase) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTestCase) ProtoMessage()    {}
func (*MsgCreateTestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8eb6889ebb153dd, []int{0}
}
func (m *MsgCreateTestCase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTestCase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTestCase.Merge(m, src)
}
func (m *MsgCreateTestCase) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTestCase.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTestCase proto.InternalMessageInfo

func (m *MsgCreateTestCase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateTestCase) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateTestCase) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCreateTestCase) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgCreateTestCase) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

// MsgCreateTestCaseRes returns store result data.
type MsgCreateTestCaseRes struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the test case.
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees  string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
}

func (m *MsgCreateTestCaseRes) Reset()         { *m = MsgCreateTestCaseRes{} }
func (m *MsgCreateTestCaseRes) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTestCaseRes) ProtoMessage()    {}
func (*MsgCreateTestCaseRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8eb6889ebb153dd, []int{1}
}
func (m *MsgCreateTestCaseRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTestCaseRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTestCaseRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTestCaseRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTestCaseRes.Merge(m, src)
}
func (m *MsgCreateTestCaseRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTestCaseRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTestCaseRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTestCaseRes proto.InternalMessageInfo

func (m *MsgCreateTestCaseRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateTestCaseRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateTestCaseRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCreateTestCaseRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgCreateTestCaseRes) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

// MsgEditTestCase edit test case metadata onto Oraichain
type MsgEditTestCase struct {
	OldName     string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName     string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the test case.
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees  string                                        `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
}

func (m *MsgEditTestCase) Reset()         { *m = MsgEditTestCase{} }
func (m *MsgEditTestCase) String() string { return proto.CompactTextString(m) }
func (*MsgEditTestCase) ProtoMessage()    {}
func (*MsgEditTestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8eb6889ebb153dd, []int{2}
}
func (m *MsgEditTestCase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditTestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditTestCase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditTestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditTestCase.Merge(m, src)
}
func (m *MsgEditTestCase) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditTestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditTestCase.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditTestCase proto.InternalMessageInfo

func (m *MsgEditTestCase) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *MsgEditTestCase) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *MsgEditTestCase) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditTestCase) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgEditTestCase) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgEditTestCase) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

// MsgEditTestCaseRes returns edit result data.
type MsgEditTestCaseRes struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the test case.
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees  string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
}

func (m *MsgEditTestCaseRes) Reset()         { *m = MsgEditTestCaseRes{} }
func (m *MsgEditTestCaseRes) String() string { return proto.CompactTextString(m) }
func (*MsgEditTestCaseRes) ProtoMessage()    {}
func (*MsgEditTestCaseRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8eb6889ebb153dd, []int{3}
}
func (m *MsgEditTestCaseRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditTestCaseRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditTestCaseRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditTestCaseRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditTestCaseRes.Merge(m, src)
}
func (m *MsgEditTestCaseRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditTestCaseRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditTestCaseRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditTestCaseRes proto.InternalMessageInfo

func (m *MsgEditTestCaseRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgEditTestCaseRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditTestCaseRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgEditTestCaseRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgEditTestCaseRes) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateTestCase)(nil), "oraichain.orai.provider.MsgCreateTestCase")
	proto.RegisterType((*MsgCreateTestCaseRes)(nil), "oraichain.orai.provider.MsgCreateTestCaseRes")
	proto.RegisterType((*MsgEditTestCase)(nil), "oraichain.orai.provider.MsgEditTestCase")
	proto.RegisterType((*MsgEditTestCaseRes)(nil), "oraichain.orai.provider.MsgEditTestCaseRes")
}

func init() { proto.RegisterFile("provider/types/tx_tcase.proto", fileDescriptor_b8eb6889ebb153dd) }

var fileDescriptor_b8eb6889ebb153dd = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0x4d, 0xaf, 0x12, 0x31,
	0x14, 0xa5, 0x32, 0x7c, 0x58, 0x4d, 0x8c, 0x0d, 0xd1, 0x81, 0xc4, 0x81, 0xcc, 0x8a, 0x98, 0x30,
	0x13, 0xe3, 0xce, 0x1d, 0xa0, 0x71, 0x05, 0x8b, 0x89, 0x2b, 0x37, 0xa4, 0xb4, 0x97, 0x61, 0x14,
	0xda, 0x49, 0x6f, 0x15, 0xfc, 0x17, 0xfe, 0x2c, 0x97, 0x2c, 0x5d, 0xa1, 0xc2, 0x3f, 0x70, 0xe9,
	0xc2, 0x98, 0x99, 0xf1, 0x11, 0xde, 0x67, 0xde, 0xe2, 0xad, 0x58, 0xf5, 0xb4, 0xe7, 0x34, 0xb7,
	0xe7, 0xdc, 0xdc, 0xd2, 0x67, 0xa9, 0xd1, 0x9f, 0x13, 0x09, 0x26, 0xb4, 0x5f, 0x52, 0xc0, 0xd0,
	0xae, 0x27, 0x56, 0x70, 0x84, 0x20, 0x35, 0xda, 0x6a, 0xf6, 0x54, 0x1b, 0x9e, 0x88, 0x39, 0x4f,
	0x54, 0x90, 0xa1, 0xe0, 0x4c, 0xdd, 0x6a, 0xc4, 0x3a, 0xd6, 0xb9, 0x26, 0xcc, 0x50, 0x21, 0xf7,
	0xb7, 0x84, 0x3e, 0x1e, 0x61, 0x3c, 0x34, 0xc0, 0x2d, 0xbc, 0x03, 0xb4, 0x43, 0x8e, 0xc0, 0x18,
	0x75, 0x14, 0x5f, 0x82, 0x4b, 0x3a, 0xa4, 0x7b, 0x3f, 0xca, 0x31, 0xeb, 0xd0, 0x07, 0x12, 0x50,
	0x98, 0x24, 0xb5, 0x89, 0x56, 0xee, 0xbd, 0x9c, 0x3a, 0x3e, 0x62, 0x2d, 0x5a, 0x17, 0x5a, 0x59,
	0xc3, 0x85, 0x75, 0xcb, 0x39, 0x7d, 0xd8, 0xb3, 0xb7, 0xb4, 0xa2, 0x57, 0x0a, 0x8c, 0xeb, 0x74,
	0x48, 0xf7, 0xe1, 0xe0, 0xc5, 0x9f, 0x6d, 0xbb, 0x17, 0x27, 0x76, 0xfe, 0x69, 0x1a, 0x08, 0xbd,
	0x0c, 0x85, 0xc6, 0xa5, 0xc6, 0xff, 0x4b, 0x0f, 0xe5, 0xc7, 0xc2, 0x5c, 0xd0, 0x17, 0xa2, 0x2f,
	0xa5, 0x01, 0xc4, 0xa8, 0xb8, 0xcf, 0x02, 0xea, 0xcc, 0x00, 0xd0, 0xad, 0x64, 0x05, 0x06, 0xad,
	0xdf, 0xdb, 0xf6, 0x93, 0x0f, 0xa8, 0xd5, 0x2b, 0xdf, 0x1a, 0xae, 0x90, 0x8b, 0xec, 0x25, 0x93,
	0x19, 0x80, 0x1f, 0xe5, 0x3a, 0xff, 0x17, 0xa1, 0x8d, 0x4b, 0x06, 0x23, 0xc0, 0x53, 0xf2, 0xf8,
	0x97, 0xd0, 0x47, 0x23, 0x8c, 0xdf, 0xc8, 0xc4, 0x1e, 0x5a, 0xd8, 0xa4, 0x75, 0xbd, 0x90, 0x93,
	0x23, 0x8b, 0x35, 0xbd, 0x90, 0xe3, 0xcc, 0x65, 0x93, 0xd6, 0x15, 0xac, 0x0a, 0xaa, 0xb0, 0x58,
	0x53, 0xb0, 0x1a, 0x5f, 0x11, 0x40, 0xf9, 0xe6, 0x00, 0x9c, 0xeb, 0x02, 0xa8, 0xdc, 0x51, 0x00,
	0xd5, 0x5b, 0x06, 0xf0, 0x83, 0x50, 0x76, 0x21, 0x80, 0xd3, 0x6a, 0xf1, 0xe0, 0xf5, 0xb7, 0x9d,
	0x47, 0x36, 0x3b, 0x8f, 0xfc, 0xdc, 0x79, 0xe4, 0xeb, 0xde, 0x2b, 0x6d, 0xf6, 0x5e, 0xe9, 0xfb,
	0xde, 0x2b, 0xbd, 0x7f, 0x7e, 0x54, 0xff, 0x30, 0xfb, 0x39, 0x0a, 0xd7, 0xe1, 0xf9, 0xbf, 0x62,
	0x5a, 0xcd, 0x87, 0xfe, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x2b, 0x55, 0x1d, 0x44,
	0x04, 0x00, 0x00,
}

func (m *MsgCreateTestCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTestCase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTestCase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTestCaseRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTestCaseRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTestCaseRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditTestCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditTestCase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditTestCase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldName) > 0 {
		i -= len(m.OldName)
		copy(dAtA[i:], m.OldName)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.OldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditTestCaseRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditTestCaseRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditTestCaseRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxTcase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxTcase(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxTcase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTestCase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	return n
}

func (m *MsgCreateTestCaseRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	return n
}

func (m *MsgEditTestCase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	return n
}

func (m *MsgEditTestCaseRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxTcase(uint64(l))
	}
	return n
}

func sovTxTcase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxTcase(x uint64) (n int) {
	return sovTxTcase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTestCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTestCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTestCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTestCaseRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTestCaseRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTestCaseRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditTestCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditTestCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditTestCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditTestCaseRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditTestCaseRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditTestCaseRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxTcase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxTcase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTcase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxTcase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxTcase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxTcase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxTcase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxTcase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxTcase = fmt.Errorf("proto: unexpected end of group")
)
