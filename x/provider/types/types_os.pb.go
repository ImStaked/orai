// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/provider/types/types_os.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OracleScript struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Owner is the address who is allowed to make further changes to the data source.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Description string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MinimumFees github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,4,rep,name=minimum_fees,json=minimumFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"minimum_fees" json:"minimum_fees"`
	DSources    []string                                      `protobuf:"bytes,5,rep,name=d_sources,json=dSources,proto3" json:"d_sources,omitempty" json:"data_sources"`
	TCases      []string                                      `protobuf:"bytes,6,rep,name=t_cases,json=tCases,proto3" json:"t_cases,omitempty" json:"test_cases"`
}

func (m *OracleScript) Reset()         { *m = OracleScript{} }
func (m *OracleScript) String() string { return proto.CompactTextString(m) }
func (*OracleScript) ProtoMessage()    {}
func (*OracleScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_36eaafb623fefbd0, []int{0}
}
func (m *OracleScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleScript.Merge(m, src)
}
func (m *OracleScript) XXX_Size() int {
	return m.Size()
}
func (m *OracleScript) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleScript.DiscardUnknown(m)
}

var xxx_messageInfo_OracleScript proto.InternalMessageInfo

func (m *OracleScript) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OracleScript) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *OracleScript) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OracleScript) GetMinimumFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MinimumFees
	}
	return nil
}

func (m *OracleScript) GetDSources() []string {
	if m != nil {
		return m.DSources
	}
	return nil
}

func (m *OracleScript) GetTCases() []string {
	if m != nil {
		return m.TCases
	}
	return nil
}

func init() {
	proto.RegisterType((*OracleScript)(nil), "oraichain.orai.provider.OracleScript")
}

func init() { proto.RegisterFile("x/provider/types/types_os.proto", fileDescriptor_36eaafb623fefbd0) }

var fileDescriptor_36eaafb623fefbd0 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x49, 0x1a, 0x1a, 0x27, 0x0b, 0x06, 0x09, 0xd3, 0xc1, 0x67, 0x99, 0xc5, 0x42, 0xea,
	0x59, 0x81, 0x05, 0x75, 0xa2, 0x69, 0x45, 0x47, 0x24, 0x97, 0x89, 0x25, 0xba, 0x9c, 0x1f, 0xe9,
	0x01, 0xf6, 0x8b, 0xee, 0x5d, 0x0a, 0xfc, 0x00, 0x76, 0x36, 0x18, 0x99, 0xf9, 0x25, 0x1d, 0x3b,
	0x32, 0x19, 0xe4, 0xfc, 0x83, 0x8e, 0x4c, 0xc8, 0x77, 0x2e, 0x44, 0x4c, 0x5d, 0xee, 0x3e, 0x7d,
	0xf7, 0x7d, 0xef, 0x7b, 0x4f, 0xf7, 0x7c, 0xf6, 0x21, 0x5b, 0x69, 0x3c, 0x57, 0x05, 0xe8, 0xcc,
	0x7c, 0x5c, 0x01, 0xb9, 0x73, 0x8e, 0xc4, 0x57, 0x1a, 0x0d, 0x06, 0xf7, 0x51, 0x0b, 0x25, 0xcf,
	0x84, 0xaa, 0x78, 0x8b, 0xf8, 0xb5, 0x7a, 0x2f, 0x92, 0x48, 0x25, 0x52, 0xb6, 0x10, 0x04, 0xd9,
	0xf9, 0x74, 0x01, 0x46, 0x4c, 0x33, 0x89, 0xaa, 0x72, 0xc6, 0xbd, 0x7b, 0x4b, 0x5c, 0xa2, 0x85,
	0x59, 0x8b, 0x1c, 0x9b, 0x7c, 0xe9, 0xfb, 0x93, 0x17, 0x5a, 0xc8, 0x77, 0x70, 0x2a, 0xb5, 0x5a,
	0x99, 0x20, 0xf0, 0x07, 0x95, 0x28, 0x21, 0xf4, 0x62, 0x2f, 0x1d, 0xe5, 0x16, 0x07, 0x27, 0xfe,
	0x0e, 0xbe, 0xaf, 0x40, 0x87, 0xb7, 0x62, 0x2f, 0x9d, 0xcc, 0xa6, 0xbf, 0x6b, 0xb6, 0xbf, 0x54,
	0xe6, 0x6c, 0xbd, 0xe0, 0x12, 0xcb, 0xac, 0x0b, 0x76, 0xd7, 0x3e, 0x15, 0x6f, 0x5d, 0xcf, 0xfc,
	0x50, 0xca, 0xc3, 0xa2, 0xd0, 0x40, 0x94, 0x3b, 0x7f, 0x10, 0xfb, 0xe3, 0x02, 0xc8, 0x06, 0x29,
	0xac, 0xc2, 0xbe, 0xcd, 0xd8, 0xa6, 0x82, 0x4f, 0x9e, 0x3f, 0x29, 0x55, 0xa5, 0xca, 0x75, 0x39,
	0x7f, 0x0d, 0x40, 0xe1, 0x20, 0xee, 0xa7, 0xe3, 0xc7, 0x0f, 0xb8, 0xab, 0xce, 0xdb, 0xe9, 0x78,
	0x37, 0x1d, 0x3f, 0x42, 0x55, 0xcd, 0x4e, 0x2e, 0x6a, 0xd6, 0xbb, 0xaa, 0xd9, 0xdd, 0x37, 0x84,
	0xd5, 0x41, 0xb2, 0x6d, 0x4e, 0xbe, 0xff, 0x64, 0xe9, 0x0d, 0x1a, 0x6d, 0xeb, 0x50, 0x3e, 0xee,
	0xac, 0xcf, 0x01, 0x28, 0x78, 0xe6, 0x8f, 0x8a, 0x39, 0xe1, 0x5a, 0x4b, 0xa0, 0x70, 0x27, 0xee,
	0xa7, 0xa3, 0xd9, 0xc3, 0xa6, 0x66, 0xbb, 0xc7, 0xa7, 0x8e, 0xfb, 0x17, 0x58, 0x08, 0x23, 0xae,
	0x95, 0x49, 0xbe, 0x5b, 0x74, 0x82, 0xe0, 0xa9, 0x7f, 0xdb, 0xcc, 0xa5, 0x20, 0xa0, 0x70, 0x68,
	0xfd, 0xac, 0xa9, 0xd9, 0xf0, 0xe5, 0x51, 0xcb, 0x5c, 0xd5, 0xec, 0x8e, 0x73, 0x1b, 0xa0, 0x4e,
	0x95, 0xe4, 0x43, 0x63, 0x1f, 0x0f, 0x06, 0x5f, 0xbf, 0x31, 0x6f, 0x76, 0x7c, 0xd1, 0x44, 0xde,
	0x65, 0x13, 0x79, 0xbf, 0x9a, 0xc8, 0xfb, 0xbc, 0x89, 0x7a, 0x97, 0x9b, 0xa8, 0xf7, 0x63, 0x13,
	0xf5, 0x5e, 0x3d, 0xda, 0x1a, 0xe9, 0xef, 0x36, 0x58, 0x94, 0xfd, 0xbf, 0x3d, 0x8b, 0xa1, 0xfd,
	0xe6, 0x27, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x94, 0x9f, 0x3e, 0x58, 0x02, 0x00, 0x00,
}

func (m *OracleScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TCases) > 0 {
		for iNdEx := len(m.TCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TCases[iNdEx])
			copy(dAtA[i:], m.TCases[iNdEx])
			i = encodeVarintTypesOs(dAtA, i, uint64(len(m.TCases[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DSources) > 0 {
		for iNdEx := len(m.DSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DSources[iNdEx])
			copy(dAtA[i:], m.DSources[iNdEx])
			i = encodeVarintTypesOs(dAtA, i, uint64(len(m.DSources[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MinimumFees) > 0 {
		for iNdEx := len(m.MinimumFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinimumFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesOs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypesOs(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypesOs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesOs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesOs(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesOs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OracleScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesOs(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypesOs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypesOs(uint64(l))
	}
	if len(m.MinimumFees) > 0 {
		for _, e := range m.MinimumFees {
			l = e.Size()
			n += 1 + l + sovTypesOs(uint64(l))
		}
	}
	if len(m.DSources) > 0 {
		for _, s := range m.DSources {
			l = len(s)
			n += 1 + l + sovTypesOs(uint64(l))
		}
	}
	if len(m.TCases) > 0 {
		for _, s := range m.TCases {
			l = len(s)
			n += 1 + l + sovTypesOs(uint64(l))
		}
	}
	return n
}

func sovTypesOs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesOs(x uint64) (n int) {
	return sovTypesOs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OracleScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumFees = append(m.MinimumFees, types.Coin{})
			if err := m.MinimumFees[len(m.MinimumFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSources = append(m.DSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCases = append(m.TCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesOs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesOs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesOs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesOs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesOs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesOs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesOs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesOs = fmt.Errorf("proto: unexpected end of group")
)
