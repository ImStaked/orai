// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/provider/types/query_oscript.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OracleScriptInfoReq is the request type for the Query/OracleScriptInfo RPC method
type OracleScriptInfoReq struct {
	// address is the address of the contract to query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *OracleScriptInfoReq) Reset()         { *m = OracleScriptInfoReq{} }
func (m *OracleScriptInfoReq) String() string { return proto.CompactTextString(m) }
func (*OracleScriptInfoReq) ProtoMessage()    {}
func (*OracleScriptInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4abb115fe145c3e, []int{0}
}
func (m *OracleScriptInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleScriptInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleScriptInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleScriptInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleScriptInfoReq.Merge(m, src)
}
func (m *OracleScriptInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *OracleScriptInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleScriptInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_OracleScriptInfoReq proto.InternalMessageInfo

func (m *OracleScriptInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// OracleScriptInfoRes is the response type for the Query/OracleScriptInfo RPC method
type OracleScriptInfoRes struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Owner is the address who is allowed to make further changes to the oracle script.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Contract    string                                        `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	Description string                                        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Fees        github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,5,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees" json:"fees"`
	DSources    []string                                      `protobuf:"bytes,6,rep,name=d_sources,json=dSources,proto3" json:"d_sources,omitempty" json:"data_sources"`
	TCases      []string                                      `protobuf:"bytes,7,rep,name=t_cases,json=tCases,proto3" json:"t_cases,omitempty" json:"test_cases"`
}

func (m *OracleScriptInfoRes) Reset()         { *m = OracleScriptInfoRes{} }
func (m *OracleScriptInfoRes) String() string { return proto.CompactTextString(m) }
func (*OracleScriptInfoRes) ProtoMessage()    {}
func (*OracleScriptInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4abb115fe145c3e, []int{1}
}
func (m *OracleScriptInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleScriptInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleScriptInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleScriptInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleScriptInfoRes.Merge(m, src)
}
func (m *OracleScriptInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *OracleScriptInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleScriptInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_OracleScriptInfoRes proto.InternalMessageInfo

func (m *OracleScriptInfoRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OracleScriptInfoRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *OracleScriptInfoRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *OracleScriptInfoRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OracleScriptInfoRes) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *OracleScriptInfoRes) GetDSources() []string {
	if m != nil {
		return m.DSources
	}
	return nil
}

func (m *OracleScriptInfoRes) GetTCases() []string {
	if m != nil {
		return m.TCases
	}
	return nil
}

// ListOracleScriptsReq is the request type for the Query/ListOracleScripts RPC method
type ListOracleScriptsReq struct {
}

func (m *ListOracleScriptsReq) Reset()         { *m = ListOracleScriptsReq{} }
func (m *ListOracleScriptsReq) String() string { return proto.CompactTextString(m) }
func (*ListOracleScriptsReq) ProtoMessage()    {}
func (*ListOracleScriptsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4abb115fe145c3e, []int{2}
}
func (m *ListOracleScriptsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOracleScriptsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOracleScriptsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOracleScriptsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOracleScriptsReq.Merge(m, src)
}
func (m *ListOracleScriptsReq) XXX_Size() int {
	return m.Size()
}
func (m *ListOracleScriptsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOracleScriptsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListOracleScriptsReq proto.InternalMessageInfo

// ListOracleScriptsRes is the response type for the Query/ListOracleScripts RPC method
type ListOracleScriptsRes struct {
	OracleScripts []OracleScript `protobuf:"bytes,1,rep,name=OracleScripts,proto3" json:"OracleScripts" json:"oracle_scripts"`
	Count         int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ListOracleScriptsRes) Reset()         { *m = ListOracleScriptsRes{} }
func (m *ListOracleScriptsRes) String() string { return proto.CompactTextString(m) }
func (*ListOracleScriptsRes) ProtoMessage()    {}
func (*ListOracleScriptsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4abb115fe145c3e, []int{3}
}
func (m *ListOracleScriptsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOracleScriptsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOracleScriptsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOracleScriptsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOracleScriptsRes.Merge(m, src)
}
func (m *ListOracleScriptsRes) XXX_Size() int {
	return m.Size()
}
func (m *ListOracleScriptsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOracleScriptsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListOracleScriptsRes proto.InternalMessageInfo

func (m *ListOracleScriptsRes) GetOracleScripts() []OracleScript {
	if m != nil {
		return m.OracleScripts
	}
	return nil
}

func (m *ListOracleScriptsRes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*OracleScriptInfoReq)(nil), "oraichain.orai.provider.OracleScriptInfoReq")
	proto.RegisterType((*OracleScriptInfoRes)(nil), "oraichain.orai.provider.OracleScriptInfoRes")
	proto.RegisterType((*ListOracleScriptsReq)(nil), "oraichain.orai.provider.ListOracleScriptsReq")
	proto.RegisterType((*ListOracleScriptsRes)(nil), "oraichain.orai.provider.ListOracleScriptsRes")
}

func init() {
	proto.RegisterFile("x/provider/types/query_oscript.proto", fileDescriptor_e4abb115fe145c3e)
}

var fileDescriptor_e4abb115fe145c3e = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x49, 0x93, 0x36, 0x17, 0x18, 0xb8, 0xa6, 0xd4, 0x64, 0xb0, 0x23, 0x0b, 0xa4, 0x80,
	0xd4, 0xb3, 0x02, 0x4c, 0x2c, 0xa8, 0x29, 0x12, 0x42, 0x42, 0x42, 0x72, 0x37, 0x16, 0xeb, 0x72,
	0xbe, 0xa6, 0x06, 0x72, 0x2f, 0xb9, 0x77, 0x29, 0x54, 0xec, 0xcc, 0xfc, 0x0d, 0xf8, 0x25, 0x1d,
	0x3b, 0x32, 0x19, 0x94, 0xfc, 0x83, 0x8c, 0x4c, 0xc8, 0x77, 0x69, 0x95, 0x40, 0x90, 0x58, 0xec,
	0xef, 0xde, 0xfb, 0xbe, 0x7b, 0x9f, 0xbe, 0x7b, 0xe4, 0xde, 0xc7, 0x78, 0xac, 0xe1, 0x2c, 0xcf,
	0xa4, 0x8e, 0xcd, 0xf9, 0x58, 0x62, 0x3c, 0x99, 0x4a, 0x7d, 0x9e, 0x02, 0x0a, 0x9d, 0x8f, 0x0d,
	0x1b, 0x6b, 0x30, 0x40, 0xf7, 0x41, 0xf3, 0x5c, 0x9c, 0xf2, 0x5c, 0xb1, 0x12, 0xb1, 0x2b, 0x49,
	0xbb, 0x35, 0x84, 0x21, 0x58, 0x4e, 0x5c, 0x22, 0x47, 0x6f, 0x07, 0x02, 0x70, 0x04, 0x18, 0x0f,
	0x38, 0xca, 0xf8, 0xac, 0x37, 0x90, 0x86, 0xf7, 0x62, 0x01, 0xb9, 0x5a, 0xf6, 0xc3, 0xbf, 0x86,
	0xda, 0x6f, 0x0a, 0xe8, 0x08, 0xd1, 0x03, 0xb2, 0xfb, 0x5a, 0x73, 0xf1, 0x5e, 0x1e, 0x5b, 0x17,
	0x2f, 0xd5, 0x09, 0x24, 0x72, 0x42, 0x29, 0xd9, 0x52, 0x7c, 0x24, 0x7d, 0xaf, 0xe3, 0x75, 0x1b,
	0x89, 0xc5, 0xd1, 0xe7, 0xea, 0x26, 0x2e, 0x6e, 0xe2, 0xd2, 0x17, 0xa4, 0x06, 0x1f, 0x94, 0xd4,
	0xfe, 0x8d, 0x8e, 0xd7, 0xbd, 0xd9, 0xef, 0xfd, 0x2a, 0xc2, 0x83, 0x61, 0x6e, 0x4e, 0xa7, 0x03,
	0x26, 0x60, 0x14, 0x2f, 0x5d, 0xbb, 0xdf, 0x01, 0x66, 0xef, 0x9c, 0x2d, 0x76, 0x28, 0xc4, 0x61,
	0x96, 0x69, 0x89, 0x98, 0x38, 0x3d, 0x6d, 0x93, 0x1d, 0x01, 0xca, 0x68, 0x2e, 0x8c, 0x5f, 0xb5,
	0x03, 0xae, 0xcf, 0xb4, 0x43, 0x9a, 0x99, 0x74, 0xe9, 0xe5, 0xa0, 0xfc, 0x2d, 0xdb, 0x5e, 0x2d,
	0x51, 0x45, 0xb6, 0x4e, 0xa4, 0x44, 0xbf, 0xd6, 0xa9, 0x76, 0x9b, 0x8f, 0xee, 0x32, 0x37, 0x90,
	0x95, 0x69, 0xb1, 0x65, 0x5a, 0xec, 0x08, 0x72, 0xd5, 0x7f, 0x76, 0x51, 0x84, 0x95, 0x45, 0x11,
	0x36, 0xdf, 0x22, 0xa8, 0xa7, 0x51, 0x29, 0x8a, 0xbe, 0xfd, 0x08, 0xbb, 0xff, 0xe1, 0xb9, 0xd4,
	0x63, 0x62, 0xe7, 0xd0, 0x27, 0xa4, 0x91, 0xa5, 0x08, 0x53, 0x2d, 0x24, 0xfa, 0xf5, 0x4e, 0xb5,
	0xdb, 0xe8, 0xef, 0x2f, 0x8a, 0x70, 0xd7, 0xdd, 0x9a, 0x71, 0xc3, 0xaf, 0xba, 0x51, 0xb2, 0x93,
	0x1d, 0x3b, 0x48, 0x19, 0xd9, 0x36, 0xa9, 0xe0, 0x28, 0xd1, 0xdf, 0xb6, 0x9a, 0xbd, 0x45, 0x11,
	0xde, 0x76, 0x1a, 0x23, 0x71, 0xd9, 0x8b, 0x92, 0xba, 0x39, 0xb2, 0xe0, 0x0e, 0x69, 0xbd, 0xca,
	0xd1, 0xac, 0xbe, 0x05, 0x26, 0x72, 0x12, 0x7d, 0xf5, 0x36, 0x36, 0x90, 0x7e, 0x22, 0xb7, 0xd6,
	0x6a, 0xbe, 0x67, 0xf3, 0xb8, 0xcf, 0xfe, 0xb1, 0x6c, 0x6c, 0x95, 0xdd, 0x67, 0x65, 0x36, 0xb3,
	0x22, 0x5c, 0xbf, 0x63, 0x51, 0x84, 0x7b, 0xce, 0x22, 0xd8, 0x72, 0xea, 0x52, 0xc7, 0x28, 0x59,
	0xe7, 0xd1, 0x16, 0xa9, 0x09, 0x98, 0x2a, 0x63, 0x57, 0xa1, 0x9a, 0xb8, 0x43, 0xff, 0xf9, 0xc5,
	0x2c, 0xf0, 0x2e, 0x67, 0x81, 0xf7, 0x73, 0x16, 0x78, 0x5f, 0xe6, 0x41, 0xe5, 0x72, 0x1e, 0x54,
	0xbe, 0xcf, 0x83, 0xca, 0x9b, 0x87, 0x2b, 0x99, 0x5f, 0xfb, 0xb3, 0x28, 0xfe, 0x73, 0x99, 0x07,
	0x75, 0xbb, 0xc4, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xde, 0xe0, 0x47, 0xe7, 0x5c, 0x03,
	0x00, 0x00,
}

func (m *OracleScriptInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleScriptInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleScriptInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleScriptInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleScriptInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleScriptInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TCases) > 0 {
		for iNdEx := len(m.TCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TCases[iNdEx])
			copy(dAtA[i:], m.TCases[iNdEx])
			i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.TCases[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DSources) > 0 {
		for iNdEx := len(m.DSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DSources[iNdEx])
			copy(dAtA[i:], m.DSources[iNdEx])
			i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.DSources[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryOscript(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryOscript(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOracleScriptsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOracleScriptsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOracleScriptsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListOracleScriptsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOracleScriptsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOracleScriptsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQueryOscript(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OracleScripts) > 0 {
		for iNdEx := len(m.OracleScripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleScripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryOscript(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryOscript(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryOscript(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OracleScriptInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryOscript(uint64(l))
	}
	return n
}

func (m *OracleScriptInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryOscript(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQueryOscript(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQueryOscript(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQueryOscript(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQueryOscript(uint64(l))
		}
	}
	if len(m.DSources) > 0 {
		for _, s := range m.DSources {
			l = len(s)
			n += 1 + l + sovQueryOscript(uint64(l))
		}
	}
	if len(m.TCases) > 0 {
		for _, s := range m.TCases {
			l = len(s)
			n += 1 + l + sovQueryOscript(uint64(l))
		}
	}
	return n
}

func (m *ListOracleScriptsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListOracleScriptsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleScripts) > 0 {
		for _, e := range m.OracleScripts {
			l = e.Size()
			n += 1 + l + sovQueryOscript(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovQueryOscript(uint64(m.Count))
	}
	return n
}

func sovQueryOscript(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryOscript(x uint64) (n int) {
	return sovQueryOscript(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OracleScriptInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleScriptInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleScriptInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleScriptInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleScriptInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleScriptInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSources = append(m.DSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCases = append(m.TCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOracleScriptsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOracleScriptsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOracleScriptsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOracleScriptsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOracleScriptsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOracleScriptsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryOscript
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleScripts = append(m.OracleScripts, OracleScript{})
			if err := m.OracleScripts[len(m.OracleScripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryOscript(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryOscript
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryOscript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryOscript
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryOscript
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryOscript
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryOscript        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryOscript          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryOscript = fmt.Errorf("proto: unexpected end of group")
)
