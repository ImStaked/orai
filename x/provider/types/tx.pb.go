// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/provider/types/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("x/provider/types/tx.proto", fileDescriptor_853b5c7cbf7be1e9) }

var fileDescriptor_853b5c7cbf7be1e9 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xb1, 0x4f, 0xea, 0x40,
	0x1c, 0x80, 0xe9, 0x7b, 0x2f, 0xe4, 0xd9, 0x18, 0xa3, 0x8d, 0x86, 0x58, 0x49, 0x8d, 0x9d, 0x0c,
	0x6a, 0x2f, 0xe8, 0xc6, 0xa6, 0xe0, 0xe0, 0x40, 0x4c, 0xc4, 0xc9, 0x85, 0x1c, 0xed, 0xa5, 0x5c,
	0x84, 0xfe, 0x9a, 0xbb, 0x83, 0xe0, 0x4a, 0x9c, 0x0d, 0x89, 0xa3, 0xff, 0x90, 0x23, 0x89, 0x8b,
	0xa3, 0x01, 0xfe, 0x10, 0xd3, 0xab, 0x54, 0x8a, 0x48, 0xcb, 0x76, 0x49, 0xbf, 0xeb, 0x7d, 0xbf,
	0xef, 0x72, 0xea, 0x6e, 0x0f, 0xf9, 0x0c, 0xba, 0xd4, 0x21, 0x0c, 0x89, 0x07, 0x9f, 0x70, 0x24,
	0x7a, 0x96, 0xcf, 0x40, 0x80, 0x96, 0x03, 0x86, 0xa9, 0xdd, 0xc4, 0xd4, 0xb3, 0x82, 0x95, 0x35,
	0xe5, 0xf4, 0x83, 0x05, 0x7b, 0xea, 0x0e, 0x87, 0x0e, 0xb3, 0x49, 0xb8, 0x77, 0x31, 0x02, 0xdc,
	0x66, 0xd4, 0x17, 0x5f, 0xc8, 0xfe, 0x22, 0x44, 0xd8, 0x98, 0x4f, 0xff, 0x91, 0x77, 0x01, 0xdc,
	0x16, 0x41, 0xd8, 0xa7, 0x08, 0x7b, 0x1e, 0x08, 0x2c, 0x28, 0x78, 0x3c, 0xfc, 0x7a, 0x3a, 0xc9,
	0xaa, 0x7f, 0xab, 0xdc, 0xd5, 0x5e, 0x14, 0x55, 0x2b, 0x33, 0x82, 0x05, 0x39, 0xbf, 0xaa, 0x60,
	0x81, 0x6b, 0x52, 0x43, 0xb3, 0xac, 0x5f, 0xec, 0xad, 0x2a, 0x77, 0x7f, 0xf2, 0x7a, 0x71, 0x35,
	0xfe, 0x86, 0x70, 0xd3, 0xec, 0xbf, 0x4d, 0x9e, 0xff, 0xe4, 0xcd, 0xed, 0xef, 0x39, 0x1c, 0x2c,
	0x70, 0xd8, 0xa1, 0xf4, 0xcf, 0xc3, 0x6d, 0xa2, 0x3d, 0x29, 0xea, 0xe6, 0xa5, 0x43, 0x45, 0xcc,
	0xed, 0x78, 0xd9, 0x59, 0xf3, 0xb4, 0x8e, 0x56, 0xa1, 0x03, 0xaf, 0x3d, 0xe9, 0xb5, 0x63, 0xae,
	0xa1, 0x6e, 0x11, 0x35, 0x00, 0xee, 0x79, 0xe9, 0x3f, 0xb4, 0x9c, 0xba, 0x14, 0x1a, 0x44, 0xb9,
	0xae, 0x19, 0xb6, 0x5b, 0xa4, 0x26, 0xaf, 0x24, 0x4d, 0xae, 0x59, 0x3e, 0x4d, 0xae, 0x59, 0x3e,
	0xd0, 0xca, 0x49, 0xad, 0xad, 0x59, 0xad, 0x78, 0xa3, 0x98, 0x50, 0x62, 0xa3, 0x98, 0x0e, 0x5a,
	0x85, 0x4e, 0x6c, 0xf4, 0xa8, 0xa8, 0x1b, 0xe1, 0x0c, 0xb7, 0x84, 0x8b, 0x32, 0xe6, 0x44, 0x2b,
	0x24, 0xcf, 0x3b, 0x65, 0xf5, 0x93, 0xf4, 0xec, 0xd2, 0x2e, 0x7d, 0x45, 0x5d, 0x0f, 0xdc, 0x23,
	0x89, 0xc3, 0xa4, 0x29, 0x23, 0x85, 0xa3, 0xb4, 0x64, 0x52, 0x8b, 0x8b, 0xca, 0xeb, 0xc8, 0x50,
	0x86, 0x23, 0x43, 0xf9, 0x18, 0x19, 0xca, 0x60, 0x6c, 0x64, 0x86, 0x63, 0x23, 0xf3, 0x3e, 0x36,
	0x32, 0x77, 0x05, 0x97, 0x8a, 0x66, 0xa7, 0x61, 0xd9, 0xd0, 0x46, 0xd1, 0x69, 0x72, 0x85, 0xe6,
	0x5f, 0x76, 0x23, 0x2b, 0xdf, 0xec, 0xd9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xc1, 0x3b,
	0x92, 0x6e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create a new data source
	CreateAIDataSource(ctx context.Context, in *MsgCreateAIDataSource, opts ...grpc.CallOption) (*MsgCreateAIDataSourceRes, error)
	// Edit an existing data source
	EditAIDataSource(ctx context.Context, in *MsgEditAIDataSource, opts ...grpc.CallOption) (*MsgEditAIDataSourceRes, error)
	// Create a new oracle script
	CreateOracleScript(ctx context.Context, in *MsgCreateOracleScript, opts ...grpc.CallOption) (*MsgCreateOracleScriptRes, error)
	// Edit an existing oracle script
	EditOracleScript(ctx context.Context, in *MsgEditOracleScript, opts ...grpc.CallOption) (*MsgEditOracleScriptRes, error)
	// Create a new test case
	CreateTestCase(ctx context.Context, in *MsgCreateTestCase, opts ...grpc.CallOption) (*MsgCreateTestCaseRes, error)
	// Edit an existing test case
	EditTestCase(ctx context.Context, in *MsgEditTestCase, opts ...grpc.CallOption) (*MsgEditTestCaseRes, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAIDataSource(ctx context.Context, in *MsgCreateAIDataSource, opts ...grpc.CallOption) (*MsgCreateAIDataSourceRes, error) {
	out := new(MsgCreateAIDataSourceRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/CreateAIDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditAIDataSource(ctx context.Context, in *MsgEditAIDataSource, opts ...grpc.CallOption) (*MsgEditAIDataSourceRes, error) {
	out := new(MsgEditAIDataSourceRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/EditAIDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOracleScript(ctx context.Context, in *MsgCreateOracleScript, opts ...grpc.CallOption) (*MsgCreateOracleScriptRes, error) {
	out := new(MsgCreateOracleScriptRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/CreateOracleScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditOracleScript(ctx context.Context, in *MsgEditOracleScript, opts ...grpc.CallOption) (*MsgEditOracleScriptRes, error) {
	out := new(MsgEditOracleScriptRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/EditOracleScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTestCase(ctx context.Context, in *MsgCreateTestCase, opts ...grpc.CallOption) (*MsgCreateTestCaseRes, error) {
	out := new(MsgCreateTestCaseRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/CreateTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditTestCase(ctx context.Context, in *MsgEditTestCase, opts ...grpc.CallOption) (*MsgEditTestCaseRes, error) {
	out := new(MsgEditTestCaseRes)
	err := c.cc.Invoke(ctx, "/oraichain.orai.provider.Msg/EditTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create a new data source
	CreateAIDataSource(context.Context, *MsgCreateAIDataSource) (*MsgCreateAIDataSourceRes, error)
	// Edit an existing data source
	EditAIDataSource(context.Context, *MsgEditAIDataSource) (*MsgEditAIDataSourceRes, error)
	// Create a new oracle script
	CreateOracleScript(context.Context, *MsgCreateOracleScript) (*MsgCreateOracleScriptRes, error)
	// Edit an existing oracle script
	EditOracleScript(context.Context, *MsgEditOracleScript) (*MsgEditOracleScriptRes, error)
	// Create a new test case
	CreateTestCase(context.Context, *MsgCreateTestCase) (*MsgCreateTestCaseRes, error)
	// Edit an existing test case
	EditTestCase(context.Context, *MsgEditTestCase) (*MsgEditTestCaseRes, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAIDataSource(ctx context.Context, req *MsgCreateAIDataSource) (*MsgCreateAIDataSourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAIDataSource not implemented")
}
func (*UnimplementedMsgServer) EditAIDataSource(ctx context.Context, req *MsgEditAIDataSource) (*MsgEditAIDataSourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAIDataSource not implemented")
}
func (*UnimplementedMsgServer) CreateOracleScript(ctx context.Context, req *MsgCreateOracleScript) (*MsgCreateOracleScriptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOracleScript not implemented")
}
func (*UnimplementedMsgServer) EditOracleScript(ctx context.Context, req *MsgEditOracleScript) (*MsgEditOracleScriptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOracleScript not implemented")
}
func (*UnimplementedMsgServer) CreateTestCase(ctx context.Context, req *MsgCreateTestCase) (*MsgCreateTestCaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (*UnimplementedMsgServer) EditTestCase(ctx context.Context, req *MsgEditTestCase) (*MsgEditTestCaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTestCase not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAIDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAIDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAIDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/CreateAIDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAIDataSource(ctx, req.(*MsgCreateAIDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditAIDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditAIDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditAIDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/EditAIDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditAIDataSource(ctx, req.(*MsgEditAIDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOracleScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOracleScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOracleScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/CreateOracleScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOracleScript(ctx, req.(*MsgCreateOracleScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditOracleScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditOracleScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditOracleScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/EditOracleScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditOracleScript(ctx, req.(*MsgEditOracleScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/CreateTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTestCase(ctx, req.(*MsgCreateTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oraichain.orai.provider.Msg/EditTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditTestCase(ctx, req.(*MsgEditTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oraichain.orai.provider.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAIDataSource",
			Handler:    _Msg_CreateAIDataSource_Handler,
		},
		{
			MethodName: "EditAIDataSource",
			Handler:    _Msg_EditAIDataSource_Handler,
		},
		{
			MethodName: "CreateOracleScript",
			Handler:    _Msg_CreateOracleScript_Handler,
		},
		{
			MethodName: "EditOracleScript",
			Handler:    _Msg_EditOracleScript_Handler,
		},
		{
			MethodName: "CreateTestCase",
			Handler:    _Msg_CreateTestCase_Handler,
		},
		{
			MethodName: "EditTestCase",
			Handler:    _Msg_EditTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "x/provider/types/tx.proto",
}
