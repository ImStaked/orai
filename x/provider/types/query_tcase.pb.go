// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/provider/types/query_tcase.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TestCaseInfoReq is the request type for the Query/TestCaseInfo RPC method
type TestCaseInfoReq struct {
	// address is the address of the contract to query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TestCaseInfoReq) Reset()         { *m = TestCaseInfoReq{} }
func (m *TestCaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*TestCaseInfoReq) ProtoMessage()    {}
func (*TestCaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ea1339ed067a33, []int{0}
}
func (m *TestCaseInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCaseInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCaseInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCaseInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCaseInfoReq.Merge(m, src)
}
func (m *TestCaseInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *TestCaseInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCaseInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_TestCaseInfoReq proto.InternalMessageInfo

func (m *TestCaseInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TestCaseInfoRes is the response type for the Query/TestCaseInfo RPC method
type TestCaseInfoRes struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Owner is the address who is allowed to make further changes to the test case.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Contract    string                                        `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	Description string                                        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Fees        github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,6,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees" json:"fees"`
}

func (m *TestCaseInfoRes) Reset()         { *m = TestCaseInfoRes{} }
func (m *TestCaseInfoRes) String() string { return proto.CompactTextString(m) }
func (*TestCaseInfoRes) ProtoMessage()    {}
func (*TestCaseInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ea1339ed067a33, []int{1}
}
func (m *TestCaseInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCaseInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCaseInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCaseInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCaseInfoRes.Merge(m, src)
}
func (m *TestCaseInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *TestCaseInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCaseInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_TestCaseInfoRes proto.InternalMessageInfo

func (m *TestCaseInfoRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestCaseInfoRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TestCaseInfoRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *TestCaseInfoRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TestCaseInfoRes) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

// ListTestCasesReq is the request type for the Query/ListTestCases RPC method
type ListTestCasesReq struct {
}

func (m *ListTestCasesReq) Reset()         { *m = ListTestCasesReq{} }
func (m *ListTestCasesReq) String() string { return proto.CompactTextString(m) }
func (*ListTestCasesReq) ProtoMessage()    {}
func (*ListTestCasesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ea1339ed067a33, []int{2}
}
func (m *ListTestCasesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTestCasesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTestCasesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTestCasesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTestCasesReq.Merge(m, src)
}
func (m *ListTestCasesReq) XXX_Size() int {
	return m.Size()
}
func (m *ListTestCasesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTestCasesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTestCasesReq proto.InternalMessageInfo

// ListTestCasesRes is the response type for the Query/ListTestCases RPC method
type ListTestCasesRes struct {
	TestCases []TestCase `protobuf:"bytes,1,rep,name=TestCases,proto3" json:"TestCases" json:"test_cases"`
	Count     int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ListTestCasesRes) Reset()         { *m = ListTestCasesRes{} }
func (m *ListTestCasesRes) String() string { return proto.CompactTextString(m) }
func (*ListTestCasesRes) ProtoMessage()    {}
func (*ListTestCasesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ea1339ed067a33, []int{3}
}
func (m *ListTestCasesRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTestCasesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTestCasesRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTestCasesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTestCasesRes.Merge(m, src)
}
func (m *ListTestCasesRes) XXX_Size() int {
	return m.Size()
}
func (m *ListTestCasesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTestCasesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListTestCasesRes proto.InternalMessageInfo

func (m *ListTestCasesRes) GetTestCases() []TestCase {
	if m != nil {
		return m.TestCases
	}
	return nil
}

func (m *ListTestCasesRes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*TestCaseInfoReq)(nil), "oraichain.orai.provider.TestCaseInfoReq")
	proto.RegisterType((*TestCaseInfoRes)(nil), "oraichain.orai.provider.TestCaseInfoRes")
	proto.RegisterType((*ListTestCasesReq)(nil), "oraichain.orai.provider.ListTestCasesReq")
	proto.RegisterType((*ListTestCasesRes)(nil), "oraichain.orai.provider.ListTestCasesRes")
}

func init() {
	proto.RegisterFile("x/provider/types/query_tcase.proto", fileDescriptor_88ea1339ed067a33)
}

var fileDescriptor_88ea1339ed067a33 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xcd, 0x36, 0x69, 0x45, 0x1d, 0x24, 0xc0, 0xaa, 0xc4, 0x92, 0xc3, 0x6e, 0x58, 0x09, 0x14,
	0x21, 0xd5, 0x56, 0xe0, 0xc6, 0x05, 0x35, 0x45, 0x42, 0x48, 0x9c, 0x56, 0x9c, 0xb8, 0x44, 0x1b,
	0xef, 0x34, 0x35, 0x28, 0x9e, 0xc4, 0xe3, 0x14, 0xfa, 0x17, 0x70, 0xe7, 0x0b, 0xf8, 0x92, 0x1e,
	0x7b, 0xe4, 0xb4, 0xa0, 0xe4, 0x0f, 0x7a, 0xe4, 0x84, 0xd6, 0x4e, 0xd2, 0xaa, 0x05, 0xa9, 0x97,
	0xdd, 0x37, 0x9e, 0xf7, 0xf4, 0x9e, 0xc7, 0xc3, 0xb2, 0x2f, 0x72, 0x6a, 0xf1, 0x44, 0x97, 0x60,
	0xa5, 0x3b, 0x9d, 0x02, 0xc9, 0xd9, 0x1c, 0xec, 0xe9, 0xd0, 0xa9, 0x82, 0x40, 0x4c, 0x2d, 0x3a,
	0xe4, 0x0f, 0xd1, 0x16, 0x5a, 0x1d, 0x17, 0xda, 0x88, 0x1a, 0x89, 0xb5, 0xa0, 0xb3, 0x37, 0xc6,
	0x31, 0x7a, 0x8e, 0xac, 0x51, 0xa0, 0x77, 0x12, 0x85, 0x34, 0x41, 0x92, 0xa3, 0x82, 0x40, 0x9e,
	0xf4, 0x47, 0xe0, 0x8a, 0xbe, 0x54, 0xa8, 0xcd, 0xaa, 0x9f, 0xde, 0xb0, 0xf4, 0xdf, 0xa1, 0x53,
	0x81, 0x90, 0x3d, 0x61, 0xf7, 0xde, 0x03, 0xb9, 0xc3, 0x82, 0xe0, 0xad, 0x39, 0xc2, 0x1c, 0x66,
	0x9c, 0xb3, 0x96, 0x29, 0x26, 0x10, 0x47, 0xdd, 0xa8, 0xb7, 0x9b, 0x7b, 0x9c, 0x7d, 0xdf, 0xba,
	0xce, 0xa3, 0x7f, 0xf1, 0xf8, 0x1b, 0xb6, 0x8d, 0x9f, 0x0d, 0xd8, 0x78, 0xab, 0x1b, 0xf5, 0xee,
	0x0e, 0xfa, 0x7f, 0xaa, 0x74, 0x7f, 0xac, 0xdd, 0xf1, 0x7c, 0x24, 0x14, 0x4e, 0xe4, 0x2a, 0x6d,
	0xf8, 0xed, 0x53, 0xf9, 0x29, 0xc4, 0x11, 0x07, 0x4a, 0x1d, 0x94, 0xa5, 0x05, 0xa2, 0x3c, 0xe8,
	0x79, 0x87, 0xdd, 0x51, 0x68, 0x9c, 0x2d, 0x94, 0x8b, 0x9b, 0xde, 0x60, 0x53, 0xf3, 0x2e, 0x6b,
	0x97, 0x40, 0xca, 0xea, 0xa9, 0xd3, 0x68, 0xe2, 0x96, 0x6f, 0x5f, 0x3d, 0xe2, 0x86, 0xb5, 0x8e,
	0x00, 0x28, 0xde, 0xe9, 0x36, 0x7b, 0xed, 0xe7, 0x8f, 0x44, 0x30, 0x14, 0xf5, 0x94, 0xc4, 0x6a,
	0x4a, 0xe2, 0x10, 0xb5, 0x19, 0xbc, 0x3a, 0xab, 0xd2, 0xc6, 0x45, 0x95, 0xb6, 0x3f, 0x12, 0x9a,
	0x97, 0x59, 0x2d, 0xca, 0x7e, 0xfc, 0x4a, 0x7b, 0xb7, 0xc8, 0x5c, 0xeb, 0x29, 0xf7, 0x3e, 0x19,
	0x67, 0xf7, 0xdf, 0x69, 0x72, 0xeb, 0x09, 0x51, 0x0e, 0xb3, 0xec, 0x5b, 0x74, 0xe3, 0x90, 0xf8,
	0x98, 0xed, 0x6e, 0xea, 0x38, 0xf2, 0xe9, 0x1e, 0x8b, 0xff, 0x3c, 0xb9, 0x58, 0x33, 0x07, 0x4f,
	0xeb, 0x94, 0x8b, 0x2a, 0xbd, 0xd4, 0x5e, 0x54, 0xe9, 0x83, 0x10, 0xd9, 0x01, 0xb9, 0x61, 0xbd,
	0x40, 0x94, 0xe5, 0x97, 0x7d, 0xbe, 0xc7, 0xb6, 0x15, 0xce, 0x8d, 0xf3, 0x0f, 0xd1, 0xcc, 0x43,
	0x31, 0x78, 0x7d, 0xb6, 0x48, 0xa2, 0xf3, 0x45, 0x12, 0xfd, 0x5e, 0x24, 0xd1, 0xd7, 0x65, 0xd2,
	0x38, 0x5f, 0x26, 0x8d, 0x9f, 0xcb, 0xa4, 0xf1, 0xe1, 0xd9, 0x95, 0x1b, 0x6f, 0xf2, 0x78, 0x24,
	0xaf, 0xaf, 0xd0, 0x68, 0xc7, 0xaf, 0xce, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0xb5,
	0x47, 0x1e, 0xd0, 0x02, 0x00, 0x00,
}

func (m *TestCaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCaseInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryTcase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestCaseInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCaseInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCaseInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTcase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQueryTcase(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQueryTcase(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQueryTcase(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryTcase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTestCasesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTestCasesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTestCasesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTestCasesRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTestCasesRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTestCasesRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQueryTcase(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTcase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTcase(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTcase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestCaseInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryTcase(uint64(l))
	}
	return n
}

func (m *TestCaseInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryTcase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQueryTcase(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQueryTcase(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQueryTcase(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQueryTcase(uint64(l))
		}
	}
	return n
}

func (m *ListTestCasesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTestCasesRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TestCases) > 0 {
		for _, e := range m.TestCases {
			l = e.Size()
			n += 1 + l + sovQueryTcase(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovQueryTcase(uint64(m.Count))
	}
	return n
}

func sovQueryTcase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTcase(x uint64) (n int) {
	return sovQueryTcase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestCaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCaseInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCaseInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCaseInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTestCasesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTestCasesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTestCasesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTestCasesRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTestCasesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTestCasesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTcase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, TestCase{})
			if err := m.TestCases[len(m.TestCases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryTcase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTcase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTcase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTcase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTcase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTcase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTcase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTcase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTcase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTcase = fmt.Errorf("proto: unexpected end of group")
)
