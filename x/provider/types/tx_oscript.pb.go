// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/provider/types/tx_oscript.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateOracleScript submit oracle script metadata onto Oraichain
type MsgCreateOracleScript struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the oracle script.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees        string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	DataSources []string                                      `protobuf:"bytes,6,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	TestCases   []string                                      `protobuf:"bytes,7,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (m *MsgCreateOracleScript) Reset()         { *m = MsgCreateOracleScript{} }
func (m *MsgCreateOracleScript) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOracleScript) ProtoMessage()    {}
func (*MsgCreateOracleScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_44893d774fea4851, []int{0}
}
func (m *MsgCreateOracleScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOracleScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOracleScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOracleScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOracleScript.Merge(m, src)
}
func (m *MsgCreateOracleScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOracleScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOracleScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOracleScript proto.InternalMessageInfo

func (m *MsgCreateOracleScript) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateOracleScript) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateOracleScript) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCreateOracleScript) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgCreateOracleScript) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgCreateOracleScript) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *MsgCreateOracleScript) GetTestCases() []string {
	if m != nil {
		return m.TestCases
	}
	return nil
}

// MsgCreateOracleScriptRes returns store result data.
type MsgCreateOracleScriptRes struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the oracle script.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees        string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	DataSources []string                                      `protobuf:"bytes,6,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	TestCases   []string                                      `protobuf:"bytes,7,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (m *MsgCreateOracleScriptRes) Reset()         { *m = MsgCreateOracleScriptRes{} }
func (m *MsgCreateOracleScriptRes) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOracleScriptRes) ProtoMessage()    {}
func (*MsgCreateOracleScriptRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_44893d774fea4851, []int{1}
}
func (m *MsgCreateOracleScriptRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOracleScriptRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOracleScriptRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOracleScriptRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOracleScriptRes.Merge(m, src)
}
func (m *MsgCreateOracleScriptRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOracleScriptRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOracleScriptRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOracleScriptRes proto.InternalMessageInfo

func (m *MsgCreateOracleScriptRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateOracleScriptRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateOracleScriptRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCreateOracleScriptRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgCreateOracleScriptRes) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgCreateOracleScriptRes) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *MsgCreateOracleScriptRes) GetTestCases() []string {
	if m != nil {
		return m.TestCases
	}
	return nil
}

// MsgEditOracleScript edit oracle script metadata onto Oraichain
type MsgEditOracleScript struct {
	OldName     string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName     string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the oracle script.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees        string                                        `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	DataSources []string                                      `protobuf:"bytes,7,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	TestCases   []string                                      `protobuf:"bytes,8,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (m *MsgEditOracleScript) Reset()         { *m = MsgEditOracleScript{} }
func (m *MsgEditOracleScript) String() string { return proto.CompactTextString(m) }
func (*MsgEditOracleScript) ProtoMessage()    {}
func (*MsgEditOracleScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_44893d774fea4851, []int{2}
}
func (m *MsgEditOracleScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditOracleScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditOracleScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditOracleScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditOracleScript.Merge(m, src)
}
func (m *MsgEditOracleScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditOracleScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditOracleScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditOracleScript proto.InternalMessageInfo

func (m *MsgEditOracleScript) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *MsgEditOracleScript) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *MsgEditOracleScript) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditOracleScript) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgEditOracleScript) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgEditOracleScript) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgEditOracleScript) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *MsgEditOracleScript) GetTestCases() []string {
	if m != nil {
		return m.TestCases
	}
	return nil
}

// MsgEditOracleScriptRes returns edit result data.
type MsgEditOracleScriptRes struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contract    string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// Owner is the address who is allowed to make further changes to the oracle script.
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Fees        string                                        `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	DataSources []string                                      `protobuf:"bytes,6,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	TestCases   []string                                      `protobuf:"bytes,7,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (m *MsgEditOracleScriptRes) Reset()         { *m = MsgEditOracleScriptRes{} }
func (m *MsgEditOracleScriptRes) String() string { return proto.CompactTextString(m) }
func (*MsgEditOracleScriptRes) ProtoMessage()    {}
func (*MsgEditOracleScriptRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_44893d774fea4851, []int{3}
}
func (m *MsgEditOracleScriptRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditOracleScriptRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditOracleScriptRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditOracleScriptRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditOracleScriptRes.Merge(m, src)
}
func (m *MsgEditOracleScriptRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditOracleScriptRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditOracleScriptRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditOracleScriptRes proto.InternalMessageInfo

func (m *MsgEditOracleScriptRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgEditOracleScriptRes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditOracleScriptRes) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgEditOracleScriptRes) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgEditOracleScriptRes) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgEditOracleScriptRes) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *MsgEditOracleScriptRes) GetTestCases() []string {
	if m != nil {
		return m.TestCases
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateOracleScript)(nil), "oraichain.orai.provider.MsgCreateOracleScript")
	proto.RegisterType((*MsgCreateOracleScriptRes)(nil), "oraichain.orai.provider.MsgCreateOracleScriptRes")
	proto.RegisterType((*MsgEditOracleScript)(nil), "oraichain.orai.provider.MsgEditOracleScript")
	proto.RegisterType((*MsgEditOracleScriptRes)(nil), "oraichain.orai.provider.MsgEditOracleScriptRes")
}

func init() { proto.RegisterFile("x/provider/types/tx_oscript.proto", fileDescriptor_44893d774fea4851) }

var fileDescriptor_44893d774fea4851 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0xcf, 0xbe, 0xbf, 0x59, 0x52, 0x2d, 0x10, 0x36, 0x27, 0xe1, 0x5c, 0xae, 0x8a, 0x90,
	0x62, 0x0b, 0xd1, 0xd1, 0xe5, 0x02, 0xa2, 0x4a, 0x90, 0x2e, 0x1d, 0x8d, 0xb5, 0xd9, 0x9d, 0x38,
	0x86, 0xbb, 0x1d, 0x6b, 0x67, 0xc3, 0x85, 0xb7, 0xe0, 0x21, 0x40, 0xbc, 0x08, 0x05, 0x65, 0x4a,
	0xaa, 0x08, 0xdd, 0xbd, 0x01, 0x25, 0x15, 0xf2, 0x1a, 0x22, 0x27, 0x3a, 0x40, 0x42, 0x29, 0xaf,
	0xf2, 0xe7, 0x6f, 0x3e, 0x7b, 0x77, 0x7e, 0x1a, 0x0d, 0xdb, 0x3e, 0x4f, 0x0a, 0x8b, 0x6f, 0x73,
	0x0d, 0x36, 0x71, 0xef, 0x0a, 0xa0, 0xc4, 0x9d, 0xa7, 0x48, 0xca, 0xe6, 0x85, 0x8b, 0x0b, 0x8b,
	0x0e, 0xf9, 0x03, 0xb4, 0x32, 0x57, 0xa7, 0x32, 0x37, 0x71, 0xa9, 0xe2, 0xdf, 0xf9, 0xfe, 0xbd,
	0x0c, 0x33, 0xf4, 0x99, 0xa4, 0x54, 0x55, 0x7c, 0xf8, 0x21, 0x64, 0xf7, 0x0f, 0x28, 0xdb, 0xb7,
	0x20, 0x1d, 0xbc, 0xb4, 0x52, 0x4d, 0xe0, 0xc8, 0xff, 0x8e, 0x73, 0xd6, 0x32, 0x72, 0x0a, 0x22,
	0x18, 0x04, 0x3b, 0x6b, 0x63, 0xaf, 0xf9, 0x80, 0xdd, 0xd1, 0x50, 0x1d, 0x97, 0xa3, 0x11, 0xa1,
	0x2f, 0xd5, 0x2d, 0xde, 0x67, 0x3d, 0x85, 0xc6, 0x59, 0xa9, 0x9c, 0x68, 0xfa, 0xf2, 0xd5, 0x3b,
	0x7f, 0xc1, 0xda, 0x38, 0x33, 0x60, 0x45, 0x6b, 0x10, 0xec, 0xac, 0x8f, 0x1e, 0xff, 0xb8, 0xdc,
	0xda, 0xcd, 0x72, 0x77, 0x7a, 0x76, 0x1c, 0x2b, 0x9c, 0x26, 0x0a, 0x69, 0x8a, 0xf4, 0xeb, 0xb1,
	0x4b, 0xfa, 0x4d, 0xd5, 0x62, 0xbc, 0xa7, 0xd4, 0x9e, 0xd6, 0x16, 0x88, 0xc6, 0xd5, 0xf7, 0x3c,
	0x66, 0xad, 0x13, 0x00, 0x12, 0xed, 0xf2, 0x80, 0x51, 0xff, 0xfb, 0xe5, 0xd6, 0xc6, 0x6b, 0x42,
	0xf3, 0x74, 0xe8, 0xac, 0x34, 0x24, 0x55, 0x79, 0x93, 0xf4, 0x04, 0x60, 0x38, 0xf6, 0x39, 0xbe,
	0xcd, 0xd6, 0xb5, 0x74, 0x32, 0x25, 0x3c, 0xb3, 0x0a, 0x48, 0x74, 0x06, 0x4d, 0x7f, 0x6f, 0xe9,
	0xe4, 0x51, 0x65, 0xf1, 0x87, 0x8c, 0x39, 0x20, 0x97, 0x2a, 0x49, 0x40, 0xa2, 0xeb, 0x03, 0x6b,
	0xa5, 0xb3, 0x5f, 0x1a, 0xc3, 0x4f, 0x21, 0x13, 0x4b, 0x31, 0x8d, 0x81, 0x56, 0xa4, 0xea, 0xa4,
	0x3e, 0x87, 0xec, 0xee, 0x01, 0x65, 0xcf, 0x75, 0xee, 0xae, 0x8d, 0xd3, 0x26, 0xeb, 0xe1, 0x44,
	0xa7, 0x35, 0x50, 0x5d, 0x9c, 0xe8, 0xc3, 0x92, 0xd5, 0x26, 0xeb, 0x19, 0x98, 0x55, 0xa5, 0x0a,
	0x54, 0xd7, 0xc0, 0xec, 0x70, 0x09, 0xc6, 0xe6, 0xdf, 0x31, 0xb6, 0xfe, 0x84, 0xb1, 0x7d, 0x4b,
	0x18, 0x3b, 0xff, 0x89, 0xb1, 0xfb, 0x2f, 0x8c, 0xbd, 0x9b, 0x18, 0x3f, 0x86, 0x6c, 0x63, 0x09,
	0xc6, 0xd5, 0xb8, 0x5d, 0xe7, 0x34, 0x7a, 0xf6, 0x65, 0x1e, 0x05, 0x17, 0xf3, 0x28, 0xf8, 0x36,
	0x8f, 0x82, 0xf7, 0x8b, 0xa8, 0x71, 0xb1, 0x88, 0x1a, 0x5f, 0x17, 0x51, 0xe3, 0xd5, 0xa3, 0x5a,
	0x07, 0x57, 0x3b, 0xd1, 0xab, 0xe4, 0xe6, 0x16, 0x3d, 0xee, 0xf8, 0x65, 0xf8, 0xe4, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x70, 0xb7, 0x65, 0xc5, 0x60, 0x05, 0x00, 0x00,
}

func (m *MsgCreateOracleScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOracleScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOracleScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestCases[iNdEx])
			copy(dAtA[i:], m.TestCases[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.TestCases[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSources[iNdEx])
			copy(dAtA[i:], m.DataSources[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.DataSources[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOracleScriptRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOracleScriptRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOracleScriptRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestCases[iNdEx])
			copy(dAtA[i:], m.TestCases[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.TestCases[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSources[iNdEx])
			copy(dAtA[i:], m.DataSources[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.DataSources[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditOracleScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditOracleScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditOracleScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestCases[iNdEx])
			copy(dAtA[i:], m.TestCases[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.TestCases[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSources[iNdEx])
			copy(dAtA[i:], m.DataSources[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.DataSources[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldName) > 0 {
		i -= len(m.OldName)
		copy(dAtA[i:], m.OldName)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.OldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditOracleScriptRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditOracleScriptRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditOracleScriptRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestCases[iNdEx])
			copy(dAtA[i:], m.TestCases[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.TestCases[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSources[iNdEx])
			copy(dAtA[i:], m.DataSources[iNdEx])
			i = encodeVarintTxOscript(dAtA, i, uint64(len(m.DataSources[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxOscript(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxOscript(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxOscript(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateOracleScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	if len(m.DataSources) > 0 {
		for _, s := range m.DataSources {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, s := range m.TestCases {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateOracleScriptRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	if len(m.DataSources) > 0 {
		for _, s := range m.DataSources {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, s := range m.TestCases {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	return n
}

func (m *MsgEditOracleScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	if len(m.DataSources) > 0 {
		for _, s := range m.DataSources {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, s := range m.TestCases {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	return n
}

func (m *MsgEditOracleScriptRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxOscript(uint64(l))
	}
	if len(m.DataSources) > 0 {
		for _, s := range m.DataSources {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, s := range m.TestCases {
			l = len(s)
			n += 1 + l + sovTxOscript(uint64(l))
		}
	}
	return n
}

func sovTxOscript(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxOscript(x uint64) (n int) {
	return sovTxOscript(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateOracleScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOracleScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOracleScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOracleScriptRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOracleScriptRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOracleScriptRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditOracleScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditOracleScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditOracleScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditOracleScriptRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOscript
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditOracleScriptRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditOracleScriptRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOscript
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOscript
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOscript(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOscript
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxOscript(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxOscript
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOscript
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxOscript
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxOscript
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxOscript
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxOscript        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxOscript          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxOscript = fmt.Errorf("proto: unexpected end of group")
)
