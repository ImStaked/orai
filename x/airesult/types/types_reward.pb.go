// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airesult/types/types_reward.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/oraichain/orai/x/provider/types"
	types "github.com/oraichain/orai/x/websocket/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reward struct {
	Validators    []types.Validator                        `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
	DataSources   []types1.AIDataSource                    `protobuf:"bytes,2,rep,name=data_sources,json=dataSources,proto3" json:"data_sources"`
	TestCases     []types1.TestCase                        `protobuf:"bytes,3,rep,name=test_cases,json=testCases,proto3" json:"test_cases"`
	BlockHeight   int64                                    `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TotalPower    int64                                    `protobuf:"varint,5,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty" json:"total_voting_power"`
	ProviderFees  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=provider_fees,json=providerFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"provider_fees" json:"provider_fees"`
	ValidatorFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=validator_fees,json=validatorFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"validator_fees" json:"validator_fees"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b5de6db0f47fad, []int{0}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetValidators() []types.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Reward) GetDataSources() []types1.AIDataSource {
	if m != nil {
		return m.DataSources
	}
	return nil
}

func (m *Reward) GetTestCases() []types1.TestCase {
	if m != nil {
		return m.TestCases
	}
	return nil
}

func (m *Reward) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Reward) GetTotalPower() int64 {
	if m != nil {
		return m.TotalPower
	}
	return 0
}

func (m *Reward) GetProviderFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ProviderFees
	}
	return nil
}

func (m *Reward) GetValidatorFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ValidatorFees
	}
	return nil
}

func init() {
	proto.RegisterType((*Reward)(nil), "oraichain.orai.airesult.Reward")
}

func init() { proto.RegisterFile("airesult/types/types_reward.proto", fileDescriptor_f4b5de6db0f47fad) }

var fileDescriptor_f4b5de6db0f47fad = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0xe3, 0x7f, 0xf2, 0x0f, 0xe2, 0x92, 0x32, 0x58, 0x45, 0xb8, 0x95, 0x6a, 0x37, 0x41,
	0x95, 0x22, 0x24, 0xce, 0x2a, 0x6c, 0x1d, 0x90, 0x48, 0xab, 0xaa, 0x59, 0x10, 0x32, 0x88, 0x81,
	0xc5, 0x3a, 0xdb, 0x87, 0x73, 0x24, 0xf5, 0x1b, 0xdd, 0x7b, 0x49, 0xe0, 0x1b, 0x20, 0xb1, 0x30,
	0x32, 0x32, 0xf3, 0x49, 0x3a, 0x76, 0x64, 0x0a, 0x28, 0x99, 0x59, 0xfa, 0x09, 0x90, 0xef, 0x6c,
	0xab, 0xae, 0x04, 0x88, 0x25, 0x79, 0xef, 0xbd, 0xe7, 0x79, 0xee, 0x77, 0xba, 0xd7, 0xa4, 0xc7,
	0x84, 0xe4, 0x38, 0x9f, 0x2a, 0x5f, 0xbd, 0x9f, 0x71, 0x34, 0xbf, 0xa1, 0xe4, 0x4b, 0x26, 0x13,
	0x3a, 0x93, 0xa0, 0xc0, 0xbe, 0x07, 0x92, 0x89, 0x78, 0xcc, 0x44, 0x46, 0xf3, 0x8a, 0x96, 0x8e,
	0x5d, 0x37, 0x06, 0x3c, 0x07, 0xf4, 0x23, 0x86, 0xdc, 0x5f, 0x1c, 0x46, 0x5c, 0xb1, 0x43, 0x3f,
	0x06, 0x91, 0x19, 0xe3, 0xee, 0x76, 0x0a, 0x29, 0xe8, 0xd2, 0xcf, 0xab, 0xa2, 0x7b, 0xb0, 0xe4,
	0x11, 0x42, 0x3c, 0xe1, 0xf5, 0x23, 0x17, 0x6c, 0x2a, 0x12, 0xa6, 0x40, 0x16, 0xb2, 0xbd, 0x99,
	0x84, 0x85, 0x48, 0xb8, 0xac, 0xa9, 0x12, 0xfc, 0xe3, 0xb6, 0x8a, 0xcd, 0x76, 0xff, 0x67, 0x8b,
	0xb4, 0x03, 0x7d, 0x09, 0x7b, 0x44, 0x48, 0x95, 0x8d, 0x8e, 0xb5, 0xdf, 0x1c, 0x74, 0x1e, 0xdd,
	0xa7, 0x37, 0xee, 0x54, 0x31, 0xd1, 0x57, 0xa5, 0x76, 0xd8, 0xba, 0x58, 0x79, 0x8d, 0xe0, 0x9a,
	0xd9, 0x7e, 0x46, 0xba, 0x09, 0x53, 0x2c, 0x44, 0x98, 0xcb, 0x98, 0xa3, 0xf3, 0x9f, 0x0e, 0x3b,
	0xb8, 0x19, 0x56, 0xa2, 0xd1, 0xa7, 0xa3, 0x13, 0xa6, 0xd8, 0x0b, 0xad, 0x2e, 0xe2, 0x3a, 0x49,
	0xd5, 0x41, 0xfb, 0x94, 0x10, 0xc5, 0x51, 0x85, 0x31, 0x43, 0x8e, 0x4e, 0x53, 0xa7, 0xf5, 0x7e,
	0x9b, 0xf6, 0x92, 0xa3, 0x3a, 0x66, 0x58, 0x26, 0xdd, 0x56, 0xc5, 0x1a, 0xed, 0x1e, 0xe9, 0x46,
	0x53, 0x88, 0x27, 0xe1, 0x98, 0x8b, 0x74, 0xac, 0x9c, 0xd6, 0xbe, 0x35, 0x68, 0x06, 0x1d, 0xdd,
	0x3b, 0xd3, 0x2d, 0xfb, 0x09, 0xe9, 0x28, 0x50, 0x6c, 0x1a, 0xce, 0x60, 0xc9, 0xa5, 0xf3, 0x7f,
	0xae, 0x18, 0xee, 0x5d, 0xad, 0xbc, 0x9d, 0xb7, 0x08, 0xd9, 0x51, 0xdf, 0x6c, 0x2e, 0x40, 0x89,
	0x2c, 0x35, 0x9a, 0x7e, 0x40, 0x74, 0xf3, 0x79, 0xbe, 0xb0, 0x3f, 0x58, 0x64, 0xab, 0x24, 0x09,
	0xdf, 0x70, 0x8e, 0x4e, 0x5b, 0xe3, 0xee, 0x50, 0x33, 0x04, 0x34, 0x1f, 0x02, 0x5a, 0x0c, 0x01,
	0x3d, 0x06, 0x91, 0x0d, 0xcf, 0x72, 0xcc, 0xab, 0x95, 0xb7, 0x6d, 0x4e, 0xa8, 0xb9, 0xfb, 0x5f,
	0xbf, 0x7b, 0x83, 0x54, 0xa8, 0xf1, 0x3c, 0xa2, 0x31, 0x9c, 0xfb, 0xc5, 0x24, 0x99, 0xbf, 0x87,
	0x98, 0x4c, 0xcc, 0x83, 0xea, 0x20, 0x0c, 0xba, 0xa5, 0xf7, 0x94, 0x73, 0xb4, 0x3f, 0x5a, 0xe4,
	0x4e, 0xf5, 0x28, 0x86, 0xe5, 0xd6, 0xdf, 0x58, 0x46, 0x05, 0xcb, 0x5d, 0xc3, 0x52, 0xb7, 0xff,
	0x1b, 0xcc, 0x56, 0x65, 0xce, 0x69, 0x8e, 0x5a, 0x9f, 0xbf, 0x78, 0xd6, 0xf0, 0xe4, 0x62, 0xed,
	0x5a, 0x97, 0x6b, 0xd7, 0xfa, 0xb1, 0x76, 0xad, 0x4f, 0x1b, 0xb7, 0x71, 0xb9, 0x71, 0x1b, 0xdf,
	0x36, 0x6e, 0xe3, 0xf5, 0x83, 0x6b, 0xc1, 0xd5, 0xcb, 0xea, 0xca, 0x7f, 0xe7, 0xd7, 0x3f, 0xbe,
	0xa8, 0xad, 0x87, 0xf7, 0xf1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x35, 0x04, 0xb3, 0x95,
	0x03, 0x00, 0x00,
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorFees) > 0 {
		for iNdEx := len(m.ValidatorFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ProviderFees) > 0 {
		for iNdEx := len(m.ProviderFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TotalPower != 0 {
		i = encodeVarintTypesReward(dAtA, i, uint64(m.TotalPower))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypesReward(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovTypesReward(uint64(l))
		}
	}
	if len(m.DataSources) > 0 {
		for _, e := range m.DataSources {
			l = e.Size()
			n += 1 + l + sovTypesReward(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, e := range m.TestCases {
			l = e.Size()
			n += 1 + l + sovTypesReward(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypesReward(uint64(m.BlockHeight))
	}
	if m.TotalPower != 0 {
		n += 1 + sovTypesReward(uint64(m.TotalPower))
	}
	if len(m.ProviderFees) > 0 {
		for _, e := range m.ProviderFees {
			l = e.Size()
			n += 1 + l + sovTypesReward(uint64(l))
		}
	}
	if len(m.ValidatorFees) > 0 {
		for _, e := range m.ValidatorFees {
			l = e.Size()
			n += 1 + l + sovTypesReward(uint64(l))
		}
	}
	return n
}

func sovTypesReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesReward(x uint64) (n int) {
	return sovTypesReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, types.Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, types1.AIDataSource{})
			if err := m.DataSources[len(m.DataSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, types1.TestCase{})
			if err := m.TestCases[len(m.TestCases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			m.TotalPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderFees = append(m.ProviderFees, types2.Coin{})
			if err := m.ProviderFees[len(m.ProviderFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorFees = append(m.ValidatorFees, types2.Coin{})
			if err := m.ValidatorFees[len(m.ValidatorFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesReward
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesReward = fmt.Errorf("proto: unexpected end of group")
)
