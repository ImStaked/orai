// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airesult/types/query_full_req.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/oraichain/orai/x/airequest/types"
	types1 "github.com/oraichain/orai/x/websocket/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFullRequestReq is the request type for the Query/QueryFullRequest RPC method
type QueryFullRequestReq struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryFullRequestReq) Reset()         { *m = QueryFullRequestReq{} }
func (m *QueryFullRequestReq) String() string { return proto.CompactTextString(m) }
func (*QueryFullRequestReq) ProtoMessage()    {}
func (*QueryFullRequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa921e32b1a8e20b, []int{0}
}
func (m *QueryFullRequestReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullRequestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullRequestReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullRequestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullRequestReq.Merge(m, src)
}
func (m *QueryFullRequestReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullRequestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullRequestReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullRequestReq proto.InternalMessageInfo

func (m *QueryFullRequestReq) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryFullRequestRes is the response type for the Query/QueryFullRequest RPC method
type QueryFullRequestRes struct {
	AIRequest types.AIRequest `protobuf:"bytes,1,opt,name=ai_request,json=aiRequest,proto3" json:"ai_request" json:"ai_request"`
	Reports   []types1.Report `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports" json:"reports"`
	Result    AIRequestResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result" json:"ai_result"`
}

func (m *QueryFullRequestRes) Reset()         { *m = QueryFullRequestRes{} }
func (m *QueryFullRequestRes) String() string { return proto.CompactTextString(m) }
func (*QueryFullRequestRes) ProtoMessage()    {}
func (*QueryFullRequestRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa921e32b1a8e20b, []int{1}
}
func (m *QueryFullRequestRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullRequestRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullRequestRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullRequestRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullRequestRes.Merge(m, src)
}
func (m *QueryFullRequestRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullRequestRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullRequestRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullRequestRes proto.InternalMessageInfo

func (m *QueryFullRequestRes) GetAIRequest() types.AIRequest {
	if m != nil {
		return m.AIRequest
	}
	return types.AIRequest{}
}

func (m *QueryFullRequestRes) GetReports() []types1.Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *QueryFullRequestRes) GetResult() AIRequestResult {
	if m != nil {
		return m.Result
	}
	return AIRequestResult{}
}

func init() {
	proto.RegisterType((*QueryFullRequestReq)(nil), "oraichain.orai.airesult.QueryFullRequestReq")
	proto.RegisterType((*QueryFullRequestRes)(nil), "oraichain.orai.airesult.QueryFullRequestRes")
}

func init() {
	proto.RegisterFile("airesult/types/query_full_req.proto", fileDescriptor_aa921e32b1a8e20b)
}

var fileDescriptor_aa921e32b1a8e20b = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x4e, 0xfa, 0x40,
	0x14, 0x6f, 0xe1, 0x1f, 0xfe, 0xe9, 0x90, 0x18, 0xad, 0x46, 0x1b, 0x12, 0x5b, 0x2c, 0x09, 0x21,
	0x2e, 0xda, 0x04, 0x77, 0xec, 0x6c, 0x8c, 0x09, 0x4b, 0x67, 0xc9, 0xa6, 0x29, 0x30, 0x42, 0xb1,
	0x32, 0x74, 0xa6, 0x8d, 0x72, 0x0b, 0x97, 0x2e, 0xbd, 0x85, 0x57, 0x60, 0xc9, 0xd2, 0x55, 0x63,
	0xca, 0x0d, 0x38, 0x81, 0x99, 0x8f, 0x82, 0x10, 0xdc, 0x34, 0xaf, 0xef, 0xfd, 0xbe, 0xe6, 0x3d,
	0xd0, 0x08, 0x42, 0x82, 0x68, 0x1a, 0x25, 0x6e, 0x32, 0x9f, 0x21, 0xea, 0xc6, 0x29, 0x22, 0x73,
	0xff, 0x31, 0x8d, 0x22, 0x9f, 0xa0, 0xd8, 0x99, 0x11, 0x9c, 0x60, 0xfd, 0x02, 0x93, 0x20, 0x1c,
	0x8c, 0x83, 0x70, 0xea, 0xb0, 0xca, 0x29, 0x38, 0xb5, 0xb3, 0x11, 0x1e, 0x61, 0x8e, 0x71, 0x59,
	0x25, 0xe0, 0xb5, 0x26, 0x9b, 0xc7, 0x29, 0xa2, 0x85, 0x28, 0xff, 0xfa, 0x41, 0xe8, 0xcb, 0xb6,
	0xc4, 0xd9, 0x2f, 0xa8, 0x4f, 0xf1, 0xe0, 0x09, 0xed, 0xe2, 0x08, 0x9a, 0x61, 0x52, 0x60, 0xae,
	0xf6, 0xf2, 0x15, 0x10, 0xd6, 0x12, 0x10, 0xbb, 0x03, 0x4e, 0x1f, 0x58, 0xea, 0xfb, 0x34, 0x8a,
	0xa0, 0x30, 0x80, 0x28, 0xd6, 0x2f, 0x01, 0x90, 0x76, 0x7e, 0x38, 0x34, 0xd4, 0xba, 0xda, 0xd2,
	0xa0, 0x26, 0x3b, 0xdd, 0x61, 0xe7, 0xdf, 0xfb, 0x87, 0xa5, 0xda, 0x9f, 0xa5, 0x43, 0x64, 0xaa,
	0x4f, 0x00, 0xd8, 0xc6, 0xe5, 0xe4, 0x6a, 0xbb, 0xe1, 0x1c, 0x58, 0x83, 0x78, 0xcf, 0x6d, 0x57,
	0x72, 0xbd, 0xe6, 0x22, 0xb3, 0x94, 0x3c, 0xb3, 0xb4, 0x4d, 0x6b, 0x9d, 0x59, 0x27, 0x13, 0x8a,
	0xa7, 0x1d, 0x7b, 0xab, 0x68, 0x43, 0x2d, 0x08, 0xe5, 0x5c, 0x87, 0xe0, 0xbf, 0x78, 0x32, 0x35,
	0x4a, 0xf5, 0x72, 0xab, 0xda, 0xae, 0xef, 0x1b, 0x6d, 0xf6, 0xe4, 0x40, 0x0e, 0xf4, 0xce, 0x99,
	0xcb, 0x3a, 0xb3, 0x8e, 0x84, 0xb0, 0xa4, 0xdb, 0xb0, 0x10, 0xd2, 0x7b, 0xa0, 0x22, 0x76, 0x64,
	0x94, 0x79, 0xf6, 0x96, 0xf3, 0xc7, 0x09, 0xb7, 0xd1, 0x21, 0xff, 0xf7, 0x0c, 0x29, 0x7d, 0xfc,
	0x2b, 0x33, 0x1b, 0xd8, 0x50, 0x2a, 0x8a, 0xcd, 0x79, 0x77, 0x8b, 0xdc, 0x54, 0x97, 0xb9, 0xa9,
	0x7e, 0xe7, 0xa6, 0xfa, 0xb6, 0x32, 0x95, 0xe5, 0xca, 0x54, 0xbe, 0x56, 0xa6, 0xd2, 0xbb, 0x1e,
	0x85, 0xc9, 0x38, 0xed, 0x3b, 0x03, 0xfc, 0xec, 0x6e, 0x5c, 0x79, 0xe5, 0xbe, 0xba, 0xbb, 0xe7,
	0xec, 0x57, 0xf8, 0x09, 0x6f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0xf2, 0x6e, 0xfe, 0x87,
	0x02, 0x00, 0x00,
}

func (m *QueryFullRequestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullRequestReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullRequestReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQueryFullReq(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullRequestRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullRequestRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullRequestRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryFullReq(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryFullReq(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.AIRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryFullReq(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQueryFullReq(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryFullReq(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFullRequestReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQueryFullReq(uint64(l))
	}
	return n
}

func (m *QueryFullRequestRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AIRequest.Size()
	n += 1 + l + sovQueryFullReq(uint64(l))
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovQueryFullReq(uint64(l))
		}
	}
	l = m.Result.Size()
	n += 1 + l + sovQueryFullReq(uint64(l))
	return n
}

func sovQueryFullReq(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryFullReq(x uint64) (n int) {
	return sovQueryFullReq(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFullRequestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryFullReq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullRequestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullRequestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryFullReq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullRequestRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryFullReq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullRequestRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullRequestRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AIRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AIRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, types1.Report{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryFullReq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryFullReq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryFullReq(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryFullReq
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryFullReq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryFullReq
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryFullReq
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryFullReq
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryFullReq        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryFullReq          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryFullReq = fmt.Errorf("proto: unexpected end of group")
)
