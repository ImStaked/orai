// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/airequest/types/tx_ai_request.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetAIRequest submit ai request metadata onto Oraichain
type MsgSetAIRequest struct {
	RequestID        string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OracleScriptName string `protobuf:"bytes,2,opt,name=oracle_script_name,json=oracleScriptName,proto3" json:"oracle_script_name,omitempty" json:"oscript_name"`
	// Owner is the address who is allowed to make further changes to the data source.
	Creator        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" json:"request_creator"`
	ValidatorCount int64                                         `protobuf:"varint,5,opt,name=validator_count,json=validatorCount,proto3" json:"validator_count,omitempty"`
	Fees           string                                        `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	Input          []byte                                        `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty" json:"request_input"`
	ExpectedOutput []byte                                        `protobuf:"bytes,8,opt,name=expected_output,json=expectedOutput,proto3" json:"expected_output,omitempty" json:"expected_output"`
}

func (m *MsgSetAIRequest) Reset()         { *m = MsgSetAIRequest{} }
func (m *MsgSetAIRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetAIRequest) ProtoMessage()    {}
func (*MsgSetAIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c555535d2524026, []int{0}
}
func (m *MsgSetAIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAIRequest.Merge(m, src)
}
func (m *MsgSetAIRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAIRequest proto.InternalMessageInfo

func (m *MsgSetAIRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *MsgSetAIRequest) GetOracleScriptName() string {
	if m != nil {
		return m.OracleScriptName
	}
	return ""
}

func (m *MsgSetAIRequest) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgSetAIRequest) GetValidatorCount() int64 {
	if m != nil {
		return m.ValidatorCount
	}
	return 0
}

func (m *MsgSetAIRequest) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgSetAIRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *MsgSetAIRequest) GetExpectedOutput() []byte {
	if m != nil {
		return m.ExpectedOutput
	}
	return nil
}

// MsgSetAIRequestRes returns store result data.
type MsgSetAIRequestRes struct {
	RequestID        string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OracleScriptName string `protobuf:"bytes,2,opt,name=oracle_script_name,json=oracleScriptName,proto3" json:"oracle_script_name,omitempty" json:"oscript_name"`
	// Owner is the address who is allowed to make further changes to the data source.
	Creator        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" json:"request_creator"`
	ValidatorCount int64                                         `protobuf:"varint,5,opt,name=validator_count,json=validatorCount,proto3" json:"validator_count,omitempty"`
	Fees           string                                        `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty" json:"transaction_fee"`
	Input          []byte                                        `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty" json:"request_input"`
	ExpectedOutput []byte                                        `protobuf:"bytes,8,opt,name=expected_output,json=expectedOutput,proto3" json:"expected_output,omitempty" json:"expected_output"`
}

func (m *MsgSetAIRequestRes) Reset()         { *m = MsgSetAIRequestRes{} }
func (m *MsgSetAIRequestRes) String() string { return proto.CompactTextString(m) }
func (*MsgSetAIRequestRes) ProtoMessage()    {}
func (*MsgSetAIRequestRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c555535d2524026, []int{1}
}
func (m *MsgSetAIRequestRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAIRequestRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAIRequestRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAIRequestRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAIRequestRes.Merge(m, src)
}
func (m *MsgSetAIRequestRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAIRequestRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAIRequestRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAIRequestRes proto.InternalMessageInfo

func (m *MsgSetAIRequestRes) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *MsgSetAIRequestRes) GetOracleScriptName() string {
	if m != nil {
		return m.OracleScriptName
	}
	return ""
}

func (m *MsgSetAIRequestRes) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgSetAIRequestRes) GetValidatorCount() int64 {
	if m != nil {
		return m.ValidatorCount
	}
	return 0
}

func (m *MsgSetAIRequestRes) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *MsgSetAIRequestRes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *MsgSetAIRequestRes) GetExpectedOutput() []byte {
	if m != nil {
		return m.ExpectedOutput
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSetAIRequest)(nil), "oraichain.orai.airequest.MsgSetAIRequest")
	proto.RegisterType((*MsgSetAIRequestRes)(nil), "oraichain.orai.airequest.MsgSetAIRequestRes")
}

func init() {
	proto.RegisterFile("x/airequest/types/tx_ai_request.proto", fileDescriptor_9c555535d2524026)
}

var fileDescriptor_9c555535d2524026 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x63, 0xd2, 0x3f, 0xe4, 0x04, 0x0d, 0x3a, 0x2a, 0x38, 0x75, 0xb0, 0xa3, 0x93, 0x10,
	0x91, 0xa0, 0xf6, 0xc0, 0xd6, 0x2d, 0x29, 0x1d, 0x22, 0x04, 0x48, 0xd7, 0x8d, 0xe5, 0x74, 0x3d,
	0xbf, 0x4d, 0x0f, 0x1a, 0x9f, 0xb9, 0x3b, 0xa3, 0xf0, 0x2d, 0x18, 0x19, 0xf9, 0x2a, 0x48, 0x0c,
	0x8c, 0x1d, 0x99, 0x2c, 0xe4, 0x7c, 0x83, 0x8c, 0x4c, 0xc8, 0x67, 0x27, 0x84, 0xf2, 0x09, 0x90,
	0x3a, 0xf9, 0xf5, 0x73, 0xbf, 0xc7, 0x7e, 0xfc, 0xbe, 0x7a, 0x8d, 0x1e, 0xcd, 0x13, 0xa1, 0x0c,
	0xbc, 0x2f, 0xc0, 0xba, 0xc4, 0x7d, 0xcc, 0xc1, 0x26, 0x6e, 0xce, 0x85, 0xe2, 0xad, 0x16, 0xe7,
	0x46, 0x3b, 0x8d, 0x89, 0x36, 0x42, 0xc9, 0x0b, 0xa1, 0xb2, 0xb8, 0xae, 0xe2, 0xb5, 0xe7, 0x60,
	0x7f, 0xaa, 0xa7, 0xda, 0x43, 0x49, 0x5d, 0x35, 0x3c, 0xfd, 0xda, 0x45, 0xfd, 0x97, 0x76, 0x7a,
	0x0a, 0x6e, 0x34, 0x61, 0x0d, 0x89, 0x9f, 0x22, 0xd4, 0x9a, 0xb8, 0x4a, 0x49, 0x30, 0x08, 0x86,
	0xbd, 0xf1, 0xdd, 0xaa, 0x8c, 0x7a, 0x2d, 0x30, 0x79, 0xce, 0x7a, 0x2d, 0x30, 0x49, 0xf1, 0x09,
	0xc2, 0xda, 0x08, 0x79, 0x09, 0xdc, 0x4a, 0xa3, 0x72, 0xc7, 0x33, 0x31, 0x03, 0x72, 0xcb, 0xbb,
	0x1e, 0x2e, 0xcb, 0xe8, 0xfe, 0x5b, 0xab, 0xb3, 0x23, 0xaa, 0x37, 0x4e, 0x29, 0xbb, 0xd7, 0x58,
	0x4e, 0xbd, 0xf6, 0x4a, 0xcc, 0x00, 0x03, 0xda, 0x95, 0x06, 0x84, 0xd3, 0x86, 0x74, 0x07, 0xc1,
	0xf0, 0xce, 0xf8, 0xc5, 0xb2, 0x8c, 0x1e, 0x34, 0xde, 0x55, 0x9a, 0x16, 0xa0, 0xbf, 0xca, 0xe8,
	0x70, 0xaa, 0xdc, 0x45, 0x71, 0x16, 0x4b, 0x3d, 0x4b, 0xa4, 0xb6, 0x33, 0x6d, 0xdb, 0xcb, 0xa1,
	0x4d, 0xdf, 0x35, 0xfd, 0x89, 0x47, 0x52, 0x8e, 0xd2, 0xd4, 0x80, 0xb5, 0x6c, 0xf5, 0x6c, 0xfc,
	0x18, 0xf5, 0x3f, 0x88, 0x4b, 0x95, 0xd6, 0x37, 0x5c, 0xea, 0x22, 0x73, 0x64, 0x7b, 0x10, 0x0c,
	0xbb, 0x6c, 0x6f, 0x2d, 0x1f, 0xd7, 0x2a, 0x8e, 0xd1, 0xd6, 0x39, 0x80, 0x25, 0x3b, 0xfe, 0x43,
	0x0e, 0xfe, 0x84, 0x71, 0x46, 0x64, 0x56, 0x48, 0xa7, 0x74, 0xc6, 0xcf, 0x01, 0x28, 0xf3, 0x1c,
	0x8e, 0xd1, 0xb6, 0xca, 0xf2, 0xc2, 0x91, 0x5d, 0x9f, 0x9e, 0x2c, 0xcb, 0x68, 0xff, 0xef, 0xf4,
	0xfe, 0x98, 0xb2, 0x06, 0xc3, 0xc7, 0xa8, 0x0f, 0xf3, 0x1c, 0xa4, 0x83, 0x94, 0xeb, 0xc2, 0xd5,
	0xce, 0xdb, 0xde, 0xb9, 0xf1, 0xaa, 0x6b, 0x00, 0x65, 0x7b, 0x2b, 0xe5, 0xb5, 0x17, 0x8e, 0xb6,
	0x3e, 0x7f, 0x89, 0x02, 0xfa, 0xad, 0x8b, 0xf0, 0xb5, 0x19, 0x32, 0xb0, 0x37, 0x63, 0xfc, 0xbf,
	0xc6, 0x38, 0x3e, 0xf9, 0x5e, 0x85, 0xc1, 0x55, 0x15, 0x06, 0x3f, 0xab, 0x30, 0xf8, 0xb4, 0x08,
	0x3b, 0x57, 0x8b, 0xb0, 0xf3, 0x63, 0x11, 0x76, 0xde, 0x3c, 0xd9, 0xe8, 0xd2, 0x7a, 0xbf, 0x7d,
	0x95, 0xfc, 0xf3, 0x57, 0x38, 0xdb, 0xf1, 0x8b, 0xfd, 0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0xfc, 0xac, 0x73, 0x31, 0x04, 0x00, 0x00,
}

func (m *MsgSetAIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedOutput) > 0 {
		i -= len(m.ExpectedOutput)
		copy(dAtA[i:], m.ExpectedOutput)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.ExpectedOutput)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x32
	}
	if m.ValidatorCount != 0 {
		i = encodeVarintTxAiRequest(dAtA, i, uint64(m.ValidatorCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleScriptName) > 0 {
		i -= len(m.OracleScriptName)
		copy(dAtA[i:], m.OracleScriptName)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.OracleScriptName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAIRequestRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAIRequestRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAIRequestRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedOutput) > 0 {
		i -= len(m.ExpectedOutput)
		copy(dAtA[i:], m.ExpectedOutput)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.ExpectedOutput)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x32
	}
	if m.ValidatorCount != 0 {
		i = encodeVarintTxAiRequest(dAtA, i, uint64(m.ValidatorCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleScriptName) > 0 {
		i -= len(m.OracleScriptName)
		copy(dAtA[i:], m.OracleScriptName)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.OracleScriptName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintTxAiRequest(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxAiRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxAiRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetAIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.OracleScriptName)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	if m.ValidatorCount != 0 {
		n += 1 + sovTxAiRequest(uint64(m.ValidatorCount))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.ExpectedOutput)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	return n
}

func (m *MsgSetAIRequestRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.OracleScriptName)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	if m.ValidatorCount != 0 {
		n += 1 + sovTxAiRequest(uint64(m.ValidatorCount))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	l = len(m.ExpectedOutput)
	if l > 0 {
		n += 1 + l + sovTxAiRequest(uint64(l))
	}
	return n
}

func sovTxAiRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxAiRequest(x uint64) (n int) {
	return sovTxAiRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetAIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleScriptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCount", wireType)
			}
			m.ValidatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedOutput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedOutput = append(m.ExpectedOutput[:0], dAtA[iNdEx:postIndex]...)
			if m.ExpectedOutput == nil {
				m.ExpectedOutput = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAIRequestRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAIRequestRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAIRequestRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleScriptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCount", wireType)
			}
			m.ValidatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedOutput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedOutput = append(m.ExpectedOutput[:0], dAtA[iNdEx:postIndex]...)
			if m.ExpectedOutput == nil {
				m.ExpectedOutput = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxAiRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxAiRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxAiRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxAiRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxAiRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxAiRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxAiRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxAiRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxAiRequest = fmt.Errorf("proto: unexpected end of group")
)
