// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airequest/types/query_ai_request.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/oraichain/orai/x/provider/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAIRequestReq is the request type for the Query/QueryAIRequest RPC method
type QueryAIRequestReq struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryAIRequestReq) Reset()         { *m = QueryAIRequestReq{} }
func (m *QueryAIRequestReq) String() string { return proto.CompactTextString(m) }
func (*QueryAIRequestReq) ProtoMessage()    {}
func (*QueryAIRequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee094470ec7ebc9e, []int{0}
}
func (m *QueryAIRequestReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAIRequestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAIRequestReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAIRequestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAIRequestReq.Merge(m, src)
}
func (m *QueryAIRequestReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryAIRequestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAIRequestReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAIRequestReq proto.InternalMessageInfo

func (m *QueryAIRequestReq) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryAIRequestRes is the response type for the Query/QueryAIRequest RPC method
type QueryAIRequestRes struct {
	RequestId        string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OracleScriptName string `protobuf:"bytes,2,opt,name=oracle_script_name,json=oracleScriptName,proto3" json:"oracle_script_name,omitempty" json:"oscript_name"`
	// Owner is the address who is allowed to make further changes to the data source.
	Creator       github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" json:"request_creator"`
	Validators    []github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,4,rep,name=validators,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validators,omitempty" json:"validator_addr"`
	BlockHeight   int64                                           `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	AiDataSources []types.AIDataSource                            `protobuf:"bytes,6,rep,name=ai_data_sources,json=aiDataSources,proto3" json:"ai_data_sources" json:"data_sources"`
	TestCases     []types.TestCase                                `protobuf:"bytes,7,rep,name=test_cases,json=testCases,proto3" json:"test_cases" json:"test_cases"`
	Fees          github_com_cosmos_cosmos_sdk_types.Coins        `protobuf:"bytes,8,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees" json:"transaction_fee"`
	Input         []byte                                          `protobuf:"bytes,9,opt,name=input,proto3" json:"input,omitempty" json:"request_input"`
	Output        []byte                                          `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty" json:"expected_output"`
}

func (m *QueryAIRequestRes) Reset()         { *m = QueryAIRequestRes{} }
func (m *QueryAIRequestRes) String() string { return proto.CompactTextString(m) }
func (*QueryAIRequestRes) ProtoMessage()    {}
func (*QueryAIRequestRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee094470ec7ebc9e, []int{1}
}
func (m *QueryAIRequestRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAIRequestRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAIRequestRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAIRequestRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAIRequestRes.Merge(m, src)
}
func (m *QueryAIRequestRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryAIRequestRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAIRequestRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAIRequestRes proto.InternalMessageInfo

func (m *QueryAIRequestRes) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryAIRequestRes) GetOracleScriptName() string {
	if m != nil {
		return m.OracleScriptName
	}
	return ""
}

func (m *QueryAIRequestRes) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *QueryAIRequestRes) GetValidators() []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *QueryAIRequestRes) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryAIRequestRes) GetAiDataSources() []types.AIDataSource {
	if m != nil {
		return m.AiDataSources
	}
	return nil
}

func (m *QueryAIRequestRes) GetTestCases() []types.TestCase {
	if m != nil {
		return m.TestCases
	}
	return nil
}

func (m *QueryAIRequestRes) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryAIRequestRes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *QueryAIRequestRes) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

// QueryAIRequestIDsReq is the request type for the Query/QueryAIRequestIDs RPC method
type QueryAIRequestIDsReq struct {
	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryAIRequestIDsReq) Reset()         { *m = QueryAIRequestIDsReq{} }
func (m *QueryAIRequestIDsReq) String() string { return proto.CompactTextString(m) }
func (*QueryAIRequestIDsReq) ProtoMessage()    {}
func (*QueryAIRequestIDsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee094470ec7ebc9e, []int{2}
}
func (m *QueryAIRequestIDsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAIRequestIDsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAIRequestIDsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAIRequestIDsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAIRequestIDsReq.Merge(m, src)
}
func (m *QueryAIRequestIDsReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryAIRequestIDsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAIRequestIDsReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAIRequestIDsReq proto.InternalMessageInfo

func (m *QueryAIRequestIDsReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryAIRequestIDsReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryAIRequestIDsRes is the response type for the Query/QueryAIRequestIDs RPC method
type QueryAIRequestIDsRes struct {
	RequestIds []string `protobuf:"bytes,1,rep,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty" json:"request_ids"`
}

func (m *QueryAIRequestIDsRes) Reset()         { *m = QueryAIRequestIDsRes{} }
func (m *QueryAIRequestIDsRes) String() string { return proto.CompactTextString(m) }
func (*QueryAIRequestIDsRes) ProtoMessage()    {}
func (*QueryAIRequestIDsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee094470ec7ebc9e, []int{3}
}
func (m *QueryAIRequestIDsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAIRequestIDsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAIRequestIDsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAIRequestIDsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAIRequestIDsRes.Merge(m, src)
}
func (m *QueryAIRequestIDsRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryAIRequestIDsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAIRequestIDsRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAIRequestIDsRes proto.InternalMessageInfo

func (m *QueryAIRequestIDsRes) GetRequestIds() []string {
	if m != nil {
		return m.RequestIds
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAIRequestReq)(nil), "oraichain.orai.airequest.QueryAIRequestReq")
	proto.RegisterType((*QueryAIRequestRes)(nil), "oraichain.orai.airequest.QueryAIRequestRes")
	proto.RegisterType((*QueryAIRequestIDsReq)(nil), "oraichain.orai.airequest.QueryAIRequestIDsReq")
	proto.RegisterType((*QueryAIRequestIDsRes)(nil), "oraichain.orai.airequest.QueryAIRequestIDsRes")
}

func init() {
	proto.RegisterFile("airequest/types/query_ai_request.proto", fileDescriptor_ee094470ec7ebc9e)
}

var fileDescriptor_ee094470ec7ebc9e = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0x8e, 0xdf, 0x84, 0xf0, 0x66, 0xe1, 0xd5, 0x5b, 0xb6, 0x29, 0x35, 0x54, 0xc4, 0xc1, 0x52,
	0xab, 0x48, 0x15, 0xb6, 0xa0, 0x87, 0x56, 0xdc, 0x62, 0xa0, 0x6a, 0xa8, 0x54, 0xa9, 0xa6, 0xed,
	0xa1, 0x3d, 0x58, 0x9b, 0xf5, 0x92, 0x2c, 0x24, 0xde, 0xe0, 0xd9, 0x20, 0xf8, 0x17, 0x3d, 0xf6,
	0x52, 0xa9, 0xe7, 0xfe, 0x12, 0x8e, 0x1c, 0x7b, 0x4a, 0x2b, 0xf8, 0x07, 0x39, 0xf6, 0x54, 0x79,
	0x77, 0xf3, 0x01, 0xfd, 0xe2, 0x92, 0xcc, 0xce, 0x3c, 0xf3, 0x3c, 0xe3, 0xd9, 0x99, 0x45, 0x0f,
	0x08, 0x4f, 0xd9, 0x51, 0x9f, 0x81, 0xf4, 0xe5, 0x69, 0x8f, 0x81, 0x7f, 0xd4, 0x67, 0xe9, 0x69,
	0x44, 0x78, 0x64, 0xdc, 0x5e, 0x2f, 0x15, 0x52, 0x60, 0x5b, 0xa4, 0x84, 0xd3, 0x36, 0xe1, 0x89,
	0x97, 0x59, 0xde, 0x38, 0x6d, 0xb9, 0xdc, 0x12, 0x2d, 0xa1, 0x40, 0x7e, 0x66, 0x69, 0xfc, 0x72,
	0x85, 0x0a, 0xe8, 0x0a, 0xf0, 0x9b, 0x04, 0x98, 0x7f, 0xbc, 0xde, 0x64, 0x92, 0xac, 0xfb, 0x54,
	0xf0, 0xc4, 0xc4, 0x57, 0x7a, 0xa9, 0x38, 0xe6, 0x31, 0x4b, 0x8d, 0xac, 0xfa, 0x8d, 0x62, 0xf8,
	0x63, 0x58, 0x52, 0x1d, 0x76, 0x9f, 0xa0, 0x85, 0x97, 0x59, 0x9d, 0xf5, 0x46, 0xa8, 0xab, 0x08,
	0xd9, 0x11, 0x5e, 0x41, 0xc8, 0xd4, 0x14, 0xf1, 0xd8, 0xb6, 0xaa, 0x56, 0xad, 0x14, 0x96, 0x8c,
	0xa7, 0x11, 0x6f, 0x16, 0x3e, 0x7c, 0x72, 0x2c, 0xf7, 0x63, 0xf1, 0xe7, 0x54, 0xf8, 0x4b, 0x2a,
	0xde, 0x41, 0x58, 0xa4, 0x84, 0x76, 0x58, 0x04, 0x34, 0xe5, 0x3d, 0x19, 0x25, 0xa4, 0xcb, 0xec,
	0x7f, 0x32, 0x58, 0x70, 0x77, 0x38, 0x70, 0x6e, 0x1f, 0x80, 0x48, 0x36, 0x5d, 0x31, 0x15, 0x75,
	0xc3, 0x5b, 0x3a, 0x65, 0x4f, 0xf9, 0x5e, 0x90, 0x2e, 0xc3, 0x0c, 0xcd, 0xd2, 0x94, 0x11, 0x29,
	0x52, 0x3b, 0x5f, 0xb5, 0x6a, 0xf3, 0xc1, 0xf3, 0xe1, 0xc0, 0x59, 0xd4, 0xb9, 0x23, 0x79, 0x03,
	0x70, 0xbf, 0x0f, 0x9c, 0xb5, 0x16, 0x97, 0xed, 0x7e, 0xd3, 0xa3, 0xa2, 0xeb, 0x9b, 0x6e, 0xea,
	0xbf, 0x35, 0x88, 0x0f, 0x75, 0x47, 0xbc, 0x3a, 0xa5, 0xf5, 0x38, 0x4e, 0x19, 0x40, 0x38, 0xe2,
	0xc6, 0x07, 0x08, 0x1d, 0x93, 0x0e, 0x8f, 0xb3, 0x03, 0xd8, 0x85, 0x6a, 0xbe, 0x36, 0x1f, 0xec,
	0x0e, 0x07, 0xce, 0x1d, 0xad, 0x34, 0x8e, 0x45, 0x24, 0x8e, 0x6f, 0x2c, 0xf4, 0x86, 0x74, 0x46,
	0x42, 0x53, 0xec, 0x78, 0x15, 0xcd, 0x37, 0x3b, 0x82, 0x1e, 0x46, 0x6d, 0xc6, 0x5b, 0x6d, 0x69,
	0xcf, 0x54, 0xad, 0x5a, 0x3e, 0x9c, 0x53, 0xbe, 0x67, 0xca, 0x85, 0x0f, 0xd0, 0xff, 0x84, 0x47,
	0x31, 0x91, 0x24, 0x02, 0xd1, 0x4f, 0x29, 0x03, 0xbb, 0x58, 0xcd, 0xd7, 0xe6, 0x36, 0xee, 0x7b,
	0xd7, 0x66, 0x6a, 0x74, 0xe7, 0x5e, 0xbd, 0xb1, 0x4d, 0x24, 0xd9, 0x53, 0xe8, 0xe0, 0xde, 0xd9,
	0xc0, 0xc9, 0x4d, 0x9a, 0x3c, 0x4d, 0xe4, 0x86, 0xff, 0x11, 0x3e, 0x81, 0x02, 0x7e, 0x87, 0x90,
	0x54, 0x5d, 0x24, 0xc0, 0xc0, 0x9e, 0x55, 0x32, 0xab, 0xbf, 0x95, 0x79, 0xc5, 0x40, 0x6e, 0x11,
	0x60, 0xc1, 0x92, 0x91, 0x58, 0xd0, 0x12, 0x13, 0x0a, 0x37, 0x2c, 0x49, 0x03, 0x02, 0x7c, 0x8a,
	0x0a, 0xfb, 0x8c, 0x81, 0xfd, 0xaf, 0xa2, 0x5d, 0xf2, 0x74, 0x8f, 0xbc, 0x6c, 0xc2, 0x3d, 0x33,
	0xe1, 0xde, 0x96, 0xe0, 0x49, 0xb0, 0x6b, 0xe8, 0xcc, 0xd5, 0xca, 0x94, 0x24, 0x40, 0xa8, 0xe4,
	0x22, 0x89, 0xf6, 0x19, 0x73, 0x3f, 0x7f, 0x75, 0x6a, 0x37, 0xe8, 0x78, 0x46, 0x05, 0xa1, 0x92,
	0xc4, 0x1e, 0x9a, 0xe1, 0x49, 0xaf, 0x2f, 0xed, 0x92, 0x9a, 0x1b, 0x7b, 0x38, 0x70, 0xca, 0x57,
	0xe7, 0x46, 0x85, 0xdd, 0x50, 0xc3, 0xf0, 0x06, 0x2a, 0x8a, 0xbe, 0xcc, 0x12, 0x90, 0x4a, 0x58,
	0x9e, 0x54, 0xc3, 0x4e, 0x7a, 0x8c, 0x4a, 0x16, 0x47, 0x1a, 0xe0, 0x86, 0x06, 0x69, 0xf6, 0xe3,
	0x29, 0x2a, 0x5f, 0x5d, 0x8f, 0xc6, 0x36, 0x64, 0xcb, 0x85, 0x51, 0xa1, 0x47, 0x5a, 0x4c, 0xed,
	0x46, 0x3e, 0x54, 0x36, 0x2e, 0xa3, 0x99, 0x0e, 0xef, 0x72, 0xa9, 0x36, 0x21, 0x1f, 0xea, 0x83,
	0xe1, 0x79, 0xfd, 0x4b, 0x1e, 0xc0, 0x8f, 0xd1, 0xdc, 0x64, 0xd3, 0xc0, 0xb6, 0xaa, 0xf9, 0x5a,
	0x29, 0x58, 0x1c, 0x0e, 0x1c, 0x7c, 0xed, 0x7b, 0x62, 0x70, 0x43, 0x34, 0x5e, 0x41, 0xd0, 0xb4,
	0xc1, 0xce, 0xd9, 0x45, 0xc5, 0x3a, 0xbf, 0xa8, 0x58, 0xdf, 0x2e, 0x2a, 0xd6, 0xfb, 0xcb, 0x4a,
	0xee, 0xfc, 0xb2, 0x92, 0xfb, 0x72, 0x59, 0xc9, 0xbd, 0x7d, 0x38, 0xd5, 0xd2, 0xf1, 0x85, 0x2b,
	0xcb, 0x3f, 0xf1, 0xaf, 0x3d, 0x72, 0xcd, 0xa2, 0x7a, 0x46, 0x1e, 0xfd, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0xe4, 0x76, 0x80, 0xfe, 0x04, 0x00, 0x00,
}

func (m *QueryAIRequestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAIRequestReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAIRequestReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAIRequestRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAIRequestRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAIRequestRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryAiRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryAiRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AiDataSources) > 0 {
		for iNdEx := len(m.AiDataSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AiDataSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryAiRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleScriptName) > 0 {
		i -= len(m.OracleScriptName)
		copy(dAtA[i:], m.OracleScriptName)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.OracleScriptName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAIRequestIDsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAIRequestIDsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAIRequestIDsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQueryAiRequest(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAIRequestIDsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAIRequestIDsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAIRequestIDsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestIds) > 0 {
		for iNdEx := len(m.RequestIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestIds[iNdEx])
			copy(dAtA[i:], m.RequestIds[iNdEx])
			i = encodeVarintQueryAiRequest(dAtA, i, uint64(len(m.RequestIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryAiRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryAiRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAIRequestReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	return n
}

func (m *QueryAIRequestRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	l = len(m.OracleScriptName)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, b := range m.Validators {
			l = len(b)
			n += 1 + l + sovQueryAiRequest(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQueryAiRequest(uint64(m.BlockHeight))
	}
	if len(m.AiDataSources) > 0 {
		for _, e := range m.AiDataSources {
			l = e.Size()
			n += 1 + l + sovQueryAiRequest(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, e := range m.TestCases {
			l = e.Size()
			n += 1 + l + sovQueryAiRequest(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQueryAiRequest(uint64(l))
		}
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovQueryAiRequest(uint64(l))
	}
	return n
}

func (m *QueryAIRequestIDsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQueryAiRequest(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQueryAiRequest(uint64(m.Limit))
	}
	return n
}

func (m *QueryAIRequestIDsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestIds) > 0 {
		for _, s := range m.RequestIds {
			l = len(s)
			n += 1 + l + sovQueryAiRequest(uint64(l))
		}
	}
	return n
}

func sovQueryAiRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryAiRequest(x uint64) (n int) {
	return sovQueryAiRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAIRequestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAIRequestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAIRequestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAIRequestRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAIRequestRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAIRequestRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleScriptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, make([]byte, postIndex-iNdEx))
			copy(m.Validators[len(m.Validators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiDataSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AiDataSources = append(m.AiDataSources, types.AIDataSource{})
			if err := m.AiDataSources[len(m.AiDataSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, types.TestCase{})
			if err := m.TestCases[len(m.TestCases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types1.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAIRequestIDsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAIRequestIDsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAIRequestIDsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAIRequestIDsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAiRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAIRequestIDsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAIRequestIDsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestIds = append(m.RequestIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAiRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueryAiRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryAiRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryAiRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryAiRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryAiRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryAiRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryAiRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryAiRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryAiRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryAiRequest = fmt.Errorf("proto: unexpected end of group")
)
