package rest

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SetAIRequestReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "from":
			z.From, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "memo":
			z.Memo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Memo")
				return
			}
		case "chain_id":
			z.ChainID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ChainID")
				return
			}
		case "account_number":
			z.AccountNumber, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AccountNumber")
				return
			}
		case "sequence":
			z.Sequence, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		case "gas_prices":
			z.GasPrices, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GasPrices")
				return
			}
		case "gas":
			z.Gas, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "gas_adjustment":
			z.GasAdjustment, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GasAdjustment")
				return
			}
		case "simulate":
			z.Simulate, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Simulate")
				return
			}
		case "oracle_script_name":
			z.OracleScriptName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OracleScriptName")
				return
			}
		case "input":
			z.Input, err = dc.ReadBytes(z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "expected_output":
			z.ExpectedOutput, err = dc.ReadBytes(z.ExpectedOutput)
			if err != nil {
				err = msgp.WrapError(err, "ExpectedOutput")
				return
			}
		case "fees":
			z.Fees, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Fees")
				return
			}
		case "validator_count":
			z.ValidatorCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ValidatorCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SetAIRequestReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "from"
	err = en.Append(0x8e, 0xa4, 0x66, 0x72, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	// write "memo"
	err = en.Append(0xa4, 0x6d, 0x65, 0x6d, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.Memo)
	if err != nil {
		err = msgp.WrapError(err, "Memo")
		return
	}
	// write "chain_id"
	err = en.Append(0xa8, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ChainID)
	if err != nil {
		err = msgp.WrapError(err, "ChainID")
		return
	}
	// write "account_number"
	err = en.Append(0xae, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AccountNumber)
	if err != nil {
		err = msgp.WrapError(err, "AccountNumber")
		return
	}
	// write "sequence"
	err = en.Append(0xa8, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Sequence)
	if err != nil {
		err = msgp.WrapError(err, "Sequence")
		return
	}
	// write "gas_prices"
	err = en.Append(0xaa, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.GasPrices)
	if err != nil {
		err = msgp.WrapError(err, "GasPrices")
		return
	}
	// write "gas"
	err = en.Append(0xa3, 0x67, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Gas)
	if err != nil {
		err = msgp.WrapError(err, "Gas")
		return
	}
	// write "gas_adjustment"
	err = en.Append(0xae, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.GasAdjustment)
	if err != nil {
		err = msgp.WrapError(err, "GasAdjustment")
		return
	}
	// write "simulate"
	err = en.Append(0xa8, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Simulate)
	if err != nil {
		err = msgp.WrapError(err, "Simulate")
		return
	}
	// write "oracle_script_name"
	err = en.Append(0xb2, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.OracleScriptName)
	if err != nil {
		err = msgp.WrapError(err, "OracleScriptName")
		return
	}
	// write "input"
	err = en.Append(0xa5, 0x69, 0x6e, 0x70, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	// write "expected_output"
	err = en.Append(0xaf, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ExpectedOutput)
	if err != nil {
		err = msgp.WrapError(err, "ExpectedOutput")
		return
	}
	// write "fees"
	err = en.Append(0xa4, 0x66, 0x65, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Fees)
	if err != nil {
		err = msgp.WrapError(err, "Fees")
		return
	}
	// write "validator_count"
	err = en.Append(0xaf, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ValidatorCount)
	if err != nil {
		err = msgp.WrapError(err, "ValidatorCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SetAIRequestReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "from"
	o = append(o, 0x8e, 0xa4, 0x66, 0x72, 0x6f, 0x6d)
	o = msgp.AppendString(o, z.From)
	// string "memo"
	o = append(o, 0xa4, 0x6d, 0x65, 0x6d, 0x6f)
	o = msgp.AppendString(o, z.Memo)
	// string "chain_id"
	o = append(o, 0xa8, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.ChainID)
	// string "account_number"
	o = append(o, 0xae, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.AccountNumber)
	// string "sequence"
	o = append(o, 0xa8, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Sequence)
	// string "gas_prices"
	o = append(o, 0xaa, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73)
	o = msgp.AppendString(o, z.GasPrices)
	// string "gas"
	o = append(o, 0xa3, 0x67, 0x61, 0x73)
	o = msgp.AppendString(o, z.Gas)
	// string "gas_adjustment"
	o = append(o, 0xae, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.GasAdjustment)
	// string "simulate"
	o = append(o, 0xa8, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65)
	o = msgp.AppendBool(o, z.Simulate)
	// string "oracle_script_name"
	o = append(o, 0xb2, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.OracleScriptName)
	// string "input"
	o = append(o, 0xa5, 0x69, 0x6e, 0x70, 0x75, 0x74)
	o = msgp.AppendBytes(o, z.Input)
	// string "expected_output"
	o = append(o, 0xaf, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74)
	o = msgp.AppendBytes(o, z.ExpectedOutput)
	// string "fees"
	o = append(o, 0xa4, 0x66, 0x65, 0x65, 0x73)
	o = msgp.AppendString(o, z.Fees)
	// string "validator_count"
	o = append(o, 0xaf, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.ValidatorCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SetAIRequestReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "from":
			z.From, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "memo":
			z.Memo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Memo")
				return
			}
		case "chain_id":
			z.ChainID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChainID")
				return
			}
		case "account_number":
			z.AccountNumber, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountNumber")
				return
			}
		case "sequence":
			z.Sequence, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		case "gas_prices":
			z.GasPrices, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GasPrices")
				return
			}
		case "gas":
			z.Gas, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gas")
				return
			}
		case "gas_adjustment":
			z.GasAdjustment, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GasAdjustment")
				return
			}
		case "simulate":
			z.Simulate, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Simulate")
				return
			}
		case "oracle_script_name":
			z.OracleScriptName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OracleScriptName")
				return
			}
		case "input":
			z.Input, bts, err = msgp.ReadBytesBytes(bts, z.Input)
			if err != nil {
				err = msgp.WrapError(err, "Input")
				return
			}
		case "expected_output":
			z.ExpectedOutput, bts, err = msgp.ReadBytesBytes(bts, z.ExpectedOutput)
			if err != nil {
				err = msgp.WrapError(err, "ExpectedOutput")
				return
			}
		case "fees":
			z.Fees, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fees")
				return
			}
		case "validator_count":
			z.ValidatorCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SetAIRequestReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.From) + 5 + msgp.StringPrefixSize + len(z.Memo) + 9 + msgp.StringPrefixSize + len(z.ChainID) + 15 + msgp.Uint64Size + 9 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.GasPrices) + 4 + msgp.StringPrefixSize + len(z.Gas) + 15 + msgp.StringPrefixSize + len(z.GasAdjustment) + 9 + msgp.BoolSize + 19 + msgp.StringPrefixSize + len(z.OracleScriptName) + 6 + msgp.BytesPrefixSize + len(z.Input) + 16 + msgp.BytesPrefixSize + len(z.ExpectedOutput) + 5 + msgp.StringPrefixSize + len(z.Fees) + 16 + msgp.IntSize
	return
}
