syntax = "proto3";
package oraichain.orai.websocket;
import "gogoproto/gogo.proto";

option go_package = "github.com/oraichain/orai/x/websocket/types";

message Fetch {
    option (gogoproto.goproto_stringer) = true;    
    string url = 1 [(gogoproto.moretags) = "json:\"url\""];
    string method = 2 [(gogoproto.moretags) = "json:\"method,omitempty\""]; 
    string authorization = 3 [(gogoproto.moretags) = "json:\"authorization,omitempty\""]; 
    string body = 4 [(gogoproto.moretags) = "json:\"body,omitempty\""]; 
}

// Report stores the result of the data source when validator executes it
message Request {
  option (gogoproto.goproto_stringer) = true;    
  Fetch fetch = 1 [(gogoproto.moretags) = "json:\"fetch\""];  
}

message QueryContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""];  
  Request request = 2 [(gogoproto.moretags) = "json:\"request\""];  
}



// Report stores the result of the data source when validator executes it
message ResponseContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes data = 1 [(gogoproto.moretags) = "json:\"data\""];    
}
