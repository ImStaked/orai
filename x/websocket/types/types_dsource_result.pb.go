// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: websocket/types/types_dsource_result.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataSourceResult struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"data_source"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" json:"result_status"`
}

func (m *DataSourceResult) Reset()         { *m = DataSourceResult{} }
func (m *DataSourceResult) String() string { return proto.CompactTextString(m) }
func (*DataSourceResult) ProtoMessage()    {}
func (*DataSourceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a45d2326176f1c, []int{0}
}
func (m *DataSourceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSourceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSourceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSourceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSourceResult.Merge(m, src)
}
func (m *DataSourceResult) XXX_Size() int {
	return m.Size()
}
func (m *DataSourceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSourceResult.DiscardUnknown(m)
}

var xxx_messageInfo_DataSourceResult proto.InternalMessageInfo

func (m *DataSourceResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSourceResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DataSourceResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*DataSourceResult)(nil), "oraichain.orai.websocket.DataSourceResult")
}

func init() {
	proto.RegisterFile("websocket/types/types_dsource_result.proto", fileDescriptor_15a45d2326176f1c)
}

var fileDescriptor_15a45d2326176f1c = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x4f, 0x4d, 0x2a,
	0xce, 0x4f, 0xce, 0x4e, 0x2d, 0xd1, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0x90, 0xf1, 0x29, 0xc5,
	0xf9, 0xa5, 0x45, 0xc9, 0xa9, 0xf1, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x12, 0xf9, 0x45, 0x89, 0x99, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x7a, 0x20, 0x96,
	0x1e, 0x5c, 0xab, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x58, 0x91, 0x3e, 0x88, 0x05, 0x51, 0xaf,
	0xd4, 0xc7, 0xc8, 0x25, 0xe0, 0x92, 0x58, 0x92, 0x18, 0x0c, 0x36, 0x2b, 0x08, 0x6c, 0x94, 0x90,
	0x16, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x93, 0xd8, 0xa7,
	0x7b, 0xf2, 0x42, 0x59, 0xc5, 0xf9, 0x79, 0x56, 0x4a, 0x29, 0x89, 0x25, 0x89, 0xf1, 0x10, 0x6b,
	0x95, 0x82, 0xc0, 0x6a, 0x84, 0xc4, 0xb8, 0xd8, 0x20, 0x0e, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x09, 0x82, 0xf2, 0x84, 0x0c, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x98, 0xc1,
	0xa6, 0x48, 0x7c, 0xba, 0x27, 0x2f, 0x02, 0x31, 0x05, 0xa2, 0x22, 0x1e, 0x22, 0xad, 0x14, 0x04,
	0x55, 0x67, 0xc5, 0x32, 0x63, 0x81, 0x3c, 0xa3, 0x93, 0xeb, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37,
	0x1e, 0xcb, 0x31, 0x44, 0x69, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0xc3, 0x7d, 0x09, 0x66, 0xe9, 0x57, 0xe8, 0xa3, 0x05, 0x51, 0x12, 0x1b, 0xd8, 0x7b, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x3c, 0x51, 0x65, 0x3c, 0x01, 0x00, 0x00,
}

func (m *DataSourceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSourceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSourceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypesDsourceResult(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTypesDsourceResult(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesDsourceResult(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesDsourceResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesDsourceResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataSourceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesDsourceResult(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTypesDsourceResult(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypesDsourceResult(uint64(l))
	}
	return n
}

func sovTypesDsourceResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesDsourceResult(x uint64) (n int) {
	return sovTypesDsourceResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataSourceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesDsourceResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSourceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSourceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesDsourceResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesDsourceResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesDsourceResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesDsourceResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesDsourceResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesDsourceResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesDsourceResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesDsourceResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesDsourceResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesDsourceResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesDsourceResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesDsourceResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesDsourceResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesDsourceResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesDsourceResult = fmt.Errorf("proto: unexpected end of group")
)
