// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/websocket/types/types_tcase_result.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestCaseResult struct {
	Name              string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"test_case"`
	DataSourceResults []*DataSourceResult `protobuf:"bytes,2,rep,name=DataSourceResults,proto3" json:"DataSourceResults,omitempty" json:"data_source_result"`
}

func (m *TestCaseResult) Reset()         { *m = TestCaseResult{} }
func (m *TestCaseResult) String() string { return proto.CompactTextString(m) }
func (*TestCaseResult) ProtoMessage()    {}
func (*TestCaseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec65f25b611fcd32, []int{0}
}
func (m *TestCaseResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCaseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCaseResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCaseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCaseResult.Merge(m, src)
}
func (m *TestCaseResult) XXX_Size() int {
	return m.Size()
}
func (m *TestCaseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCaseResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestCaseResult proto.InternalMessageInfo

func (m *TestCaseResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestCaseResult) GetDataSourceResults() []*DataSourceResult {
	if m != nil {
		return m.DataSourceResults
	}
	return nil
}

func init() {
	proto.RegisterType((*TestCaseResult)(nil), "oraichain.orai.websocket.TestCaseResult")
}

func init() {
	proto.RegisterFile("x/websocket/types/types_tcase_result.proto", fileDescriptor_ec65f25b611fcd32)
}

var fileDescriptor_ec65f25b611fcd32 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xaa, 0xd0, 0x2f, 0x4f,
	0x4d, 0x2a, 0xce, 0x4f, 0xce, 0x4e, 0x2d, 0xd1, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0x90, 0xf1,
	0x25, 0xc9, 0x89, 0xc5, 0xa9, 0xf1, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x12, 0xf9, 0x45, 0x89, 0x99, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x7a, 0x20, 0x96,
	0x1e, 0x5c, 0xa3, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x58, 0x91, 0x3e, 0x88, 0x05, 0x51, 0x2f,
	0xa5, 0x83, 0xcb, 0xec, 0x94, 0xe2, 0xfc, 0xd2, 0xa2, 0x64, 0x54, 0xd3, 0x95, 0xce, 0x33, 0x72,
	0xf1, 0x85, 0xa4, 0x16, 0x97, 0x38, 0x27, 0x16, 0xa7, 0x06, 0x81, 0x25, 0x84, 0x34, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0x44, 0x3e, 0xdd, 0x93, 0x17,
	0xc8, 0x2a, 0xce, 0xcf, 0xb3, 0x52, 0x2a, 0x49, 0x2d, 0x2e, 0x89, 0x07, 0x39, 0x50, 0x29, 0x08,
	0xac, 0x42, 0xa8, 0x87, 0x91, 0x4b, 0xd0, 0x25, 0xb1, 0x24, 0x31, 0x18, 0x6c, 0x30, 0x44, 0x7b,
	0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x96, 0x1e, 0x2e, 0x77, 0xeb, 0xa1, 0x6b, 0x71,
	0x32, 0x7a, 0x74, 0x4f, 0x1e, 0xd3, 0xa0, 0x4f, 0xf7, 0xe4, 0x25, 0x21, 0x16, 0xa7, 0x24, 0x96,
	0x24, 0xc6, 0xa3, 0xb8, 0x5e, 0x29, 0x08, 0x53, 0xbd, 0x15, 0xcb, 0x8c, 0x05, 0xf2, 0x8c, 0x4e,
	0xae, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9d, 0x9e, 0x59, 0x92,
	0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x77, 0x1c, 0x98, 0xa5, 0x8f, 0x11, 0x66, 0x49,
	0x6c, 0xe0, 0xf0, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x46, 0xb9, 0x61, 0xab, 0x01,
	0x00, 0x00,
}

func (m *TestCaseResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCaseResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCaseResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataSourceResults) > 0 {
		for iNdEx := len(m.DataSourceResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSourceResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesTcaseResult(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesTcaseResult(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesTcaseResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesTcaseResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestCaseResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesTcaseResult(uint64(l))
	}
	if len(m.DataSourceResults) > 0 {
		for _, e := range m.DataSourceResults {
			l = e.Size()
			n += 1 + l + sovTypesTcaseResult(uint64(l))
		}
	}
	return n
}

func sovTypesTcaseResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesTcaseResult(x uint64) (n int) {
	return sovTypesTcaseResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestCaseResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesTcaseResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCaseResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCaseResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTcaseResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTcaseResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceResults = append(m.DataSourceResults, &DataSourceResult{})
			if err := m.DataSourceResults[len(m.DataSourceResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesTcaseResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesTcaseResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesTcaseResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesTcaseResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesTcaseResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesTcaseResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesTcaseResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesTcaseResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesTcaseResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesTcaseResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesTcaseResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesTcaseResult = fmt.Errorf("proto: unexpected end of group")
)
