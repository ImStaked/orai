// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/websocket/types/tx_report.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateReport defines message for creating a report by a reporter of a validator
type MsgCreateReport struct {
	RequestID         string                                   `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty" json:"request_id"`
	DataSourceResults []*DataSourceResult                      `protobuf:"bytes,2,rep,name=DataSourceResults,proto3" json:"DataSourceResults,omitempty" json:"data_source_result"`
	TestCaseResults   []*TestCaseResult                        `protobuf:"bytes,3,rep,name=TestCaseResults,proto3" json:"TestCaseResults,omitempty" json:"test_case_results"`
	Reporter          *Reporter                                `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty" json:"reporter"`
	Fees              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees" json:"report_fee"`
	AggregatedResult  []byte                                   `protobuf:"bytes,6,opt,name=aggregatedResult,proto3" json:"aggregatedResult,omitempty" json:"aggregated_result"`
	ResultStatus      string                                   `protobuf:"bytes,7,opt,name=resultStatus,proto3" json:"resultStatus,omitempty" json:"result_status"`
}

func (m *MsgCreateReport) Reset()         { *m = MsgCreateReport{} }
func (m *MsgCreateReport) String() string { return proto.CompactTextString(m) }
func (*MsgCreateReport) ProtoMessage()    {}
func (*MsgCreateReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fcdaeb04e05d4a1, []int{0}
}
func (m *MsgCreateReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateReport.Merge(m, src)
}
func (m *MsgCreateReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateReport proto.InternalMessageInfo

func (m *MsgCreateReport) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *MsgCreateReport) GetDataSourceResults() []*DataSourceResult {
	if m != nil {
		return m.DataSourceResults
	}
	return nil
}

func (m *MsgCreateReport) GetTestCaseResults() []*TestCaseResult {
	if m != nil {
		return m.TestCaseResults
	}
	return nil
}

func (m *MsgCreateReport) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *MsgCreateReport) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *MsgCreateReport) GetAggregatedResult() []byte {
	if m != nil {
		return m.AggregatedResult
	}
	return nil
}

func (m *MsgCreateReport) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

// MsgAddReporterRes returns added reporter data.
type MsgCreateReportRes struct {
	RequestID         string                                   `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty" json:"request_id"`
	DataSourceResults []*DataSourceResult                      `protobuf:"bytes,2,rep,name=DataSourceResults,proto3" json:"DataSourceResults,omitempty" json:"data_source_result"`
	TestCaseResults   []*TestCaseResult                        `protobuf:"bytes,3,rep,name=TestCaseResults,proto3" json:"TestCaseResults,omitempty" json:"test_case_results"`
	Reporter          *Reporter                                `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty" json:"reporter"`
	Fees              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees" json:"report_fee"`
	AggregatedResult  []byte                                   `protobuf:"bytes,6,opt,name=aggregatedResult,proto3" json:"aggregatedResult,omitempty" json:"aggregated_result"`
	ResultStatus      string                                   `protobuf:"bytes,7,opt,name=resultStatus,proto3" json:"resultStatus,omitempty" json:"result_status"`
}

func (m *MsgCreateReportRes) Reset()         { *m = MsgCreateReportRes{} }
func (m *MsgCreateReportRes) String() string { return proto.CompactTextString(m) }
func (*MsgCreateReportRes) ProtoMessage()    {}
func (*MsgCreateReportRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fcdaeb04e05d4a1, []int{1}
}
func (m *MsgCreateReportRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateReportRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateReportRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateReportRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateReportRes.Merge(m, src)
}
func (m *MsgCreateReportRes) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateReportRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateReportRes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateReportRes proto.InternalMessageInfo

func (m *MsgCreateReportRes) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *MsgCreateReportRes) GetDataSourceResults() []*DataSourceResult {
	if m != nil {
		return m.DataSourceResults
	}
	return nil
}

func (m *MsgCreateReportRes) GetTestCaseResults() []*TestCaseResult {
	if m != nil {
		return m.TestCaseResults
	}
	return nil
}

func (m *MsgCreateReportRes) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *MsgCreateReportRes) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *MsgCreateReportRes) GetAggregatedResult() []byte {
	if m != nil {
		return m.AggregatedResult
	}
	return nil
}

func (m *MsgCreateReportRes) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateReport)(nil), "oraichain.orai.websocket.MsgCreateReport")
	proto.RegisterType((*MsgCreateReportRes)(nil), "oraichain.orai.websocket.MsgCreateReportRes")
}

func init() { proto.RegisterFile("x/websocket/types/tx_report.proto", fileDescriptor_6fcdaeb04e05d4a1) }

var fileDescriptor_6fcdaeb04e05d4a1 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0xbf, 0x6e, 0x13, 0x4f,
	0x10, 0xf6, 0xfd, 0x12, 0xe7, 0x47, 0x2e, 0x91, 0x4c, 0x8e, 0x20, 0x5d, 0x2c, 0x74, 0x67, 0xae,
	0x40, 0xa7, 0x00, 0xbb, 0x8a, 0xd3, 0x21, 0xaa, 0x73, 0x22, 0x41, 0x41, 0xb3, 0xa6, 0xa2, 0x39,
	0xad, 0xcf, 0x93, 0xcb, 0x11, 0xe2, 0x35, 0x3b, 0x6b, 0x08, 0x35, 0x2d, 0x05, 0xcf, 0x41, 0x81,
	0xc4, 0x5b, 0xa4, 0x4c, 0x49, 0x75, 0x20, 0xfb, 0x0d, 0xfc, 0x04, 0xe8, 0x76, 0xcf, 0xff, 0x71,
	0x4f, 0x91, 0xc6, 0x1e, 0xdd, 0x7c, 0x33, 0xf3, 0xcd, 0x37, 0x9f, 0xd6, 0x7e, 0x78, 0x45, 0x3f,
	0x42, 0x07, 0x45, 0x72, 0x01, 0x8a, 0xaa, 0x4f, 0x7d, 0x40, 0xaa, 0xae, 0x62, 0x09, 0x7d, 0x21,
	0x15, 0xe9, 0x4b, 0xa1, 0x84, 0xe3, 0x0a, 0xc9, 0xb3, 0xe4, 0x9c, 0x67, 0x3d, 0x52, 0x44, 0x64,
	0x8a, 0xaf, 0x7b, 0x89, 0xc0, 0x4b, 0x81, 0xb4, 0xc3, 0x11, 0xe8, 0x87, 0xa3, 0x0e, 0x28, 0x7e,
	0x44, 0x13, 0x91, 0xf5, 0x4c, 0x65, 0xfd, 0xc9, 0x5f, 0x9a, 0x17, 0xbf, 0x71, 0x17, 0xc5, 0x40,
	0x26, 0x10, 0x4b, 0xc0, 0xc1, 0xbb, 0x72, 0x4e, 0xfd, 0x70, 0x1d, 0x5a, 0x25, 0x1c, 0x97, 0xb0,
	0x8f, 0xd6, 0x61, 0x0d, 0x73, 0x90, 0x25, 0x6e, 0x3f, 0x15, 0xa9, 0xd0, 0x21, 0x2d, 0x22, 0xf3,
	0x35, 0xf8, 0x5e, 0xb5, 0x6b, 0xaf, 0x30, 0x6d, 0x49, 0xe0, 0x0a, 0x98, 0xae, 0x70, 0x8e, 0xed,
	0x6d, 0x09, 0xef, 0x07, 0x80, 0xea, 0xe5, 0x89, 0x6b, 0x35, 0xac, 0x70, 0x3b, 0xba, 0x3f, 0xce,
	0xfd, 0xbd, 0xb7, 0x28, 0x7a, 0xcf, 0x82, 0x32, 0x15, 0x67, 0xdd, 0x80, 0xcd, 0x70, 0xce, 0x17,
	0xcb, 0xde, 0x3b, 0xe1, 0x8a, 0xb7, 0xf5, 0x3a, 0x4c, 0x33, 0x44, 0xf7, 0xbf, 0xc6, 0x46, 0xb8,
	0xd3, 0x3c, 0x24, 0xeb, 0x74, 0x23, 0xcb, 0x25, 0x51, 0x73, 0x98, 0xfb, 0xab, 0x8d, 0xc6, 0xb9,
	0x7f, 0x60, 0xc6, 0x77, 0xb9, 0xe2, 0xf1, 0x82, 0x66, 0x01, 0x5b, 0xc5, 0x3b, 0x9f, 0x2d, 0xbb,
	0xf6, 0x1a, 0x50, 0xb5, 0x38, 0x4e, 0xc9, 0x6c, 0x68, 0x32, 0xe1, 0x7a, 0x32, 0x8b, 0x05, 0x11,
	0x1d, 0xe6, 0xfe, 0x72, 0x93, 0x71, 0xee, 0xbb, 0x86, 0x88, 0x2a, 0x44, 0x98, 0x3b, 0x07, 0x06,
	0x6c, 0x19, 0xec, 0xb4, 0xed, 0x3b, 0x93, 0x2b, 0xb8, 0x9b, 0x0d, 0x2b, 0xdc, 0x69, 0x06, 0xeb,
	0xa7, 0xb3, 0x12, 0x19, 0xdd, 0x1b, 0xe7, 0x7e, 0x6d, 0x22, 0xb6, 0xf9, 0x16, 0xb0, 0x69, 0x23,
	0x47, 0xd9, 0x9b, 0x67, 0x00, 0xe8, 0x56, 0xf5, 0x3a, 0x07, 0xc4, 0x38, 0x8f, 0x14, 0xce, 0x23,
	0xa5, 0xf3, 0x48, 0x4b, 0x64, 0xbd, 0xe8, 0xf4, 0x3a, 0xf7, 0x2b, 0xf3, 0x87, 0x2b, 0x1a, 0xc4,
	0x67, 0x00, 0xc1, 0xb7, 0x5f, 0x7e, 0x98, 0x66, 0xea, 0x7c, 0xd0, 0x21, 0x89, 0xb8, 0xa4, 0xa5,
	0x77, 0xcd, 0xdf, 0x53, 0xec, 0x5e, 0x18, 0x07, 0xe9, 0x2e, 0xc8, 0xf4, 0x34, 0xe7, 0x85, 0x7d,
	0x97, 0xa7, 0xa9, 0x84, 0x94, 0x2b, 0xe8, 0x9a, 0xfd, 0xdc, 0xad, 0x86, 0x15, 0xee, 0x46, 0x0f,
	0x66, 0x9a, 0xcc, 0x10, 0xd3, 0xdb, 0xac, 0x54, 0x39, 0xcf, 0xed, 0x5d, 0x93, 0x6c, 0x2b, 0xae,
	0x06, 0xe8, 0xfe, 0xaf, 0x1d, 0xe6, 0x8e, 0x73, 0x7f, 0x7f, 0x42, 0xb4, 0xc8, 0xc6, 0xa8, 0xd3,
	0x01, 0x5b, 0x40, 0x07, 0x3f, 0xaa, 0xb6, 0xb3, 0x64, 0x58, 0x06, 0x78, 0xeb, 0xd9, 0x5b, 0xcf,
	0xfe, 0xb3, 0x9e, 0x8d, 0x4e, 0xaf, 0x87, 0x9e, 0x75, 0x33, 0xf4, 0xac, 0xdf, 0x43, 0xcf, 0xfa,
	0x3a, 0xf2, 0x2a, 0x37, 0x23, 0xaf, 0xf2, 0x73, 0xe4, 0x55, 0xde, 0x3c, 0x9e, 0xdb, 0x68, 0x2a,
	0xb2, 0x8e, 0xe8, 0xca, 0xb3, 0xde, 0xd9, 0xd2, 0x4f, 0xf6, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x7f, 0x37, 0xa7, 0xa9, 0x06, 0x00, 0x00,
}

func (m *MsgCreateReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResultStatus) > 0 {
		i -= len(m.ResultStatus)
		copy(dAtA[i:], m.ResultStatus)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.ResultStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AggregatedResult) > 0 {
		i -= len(m.AggregatedResult)
		copy(dAtA[i:], m.AggregatedResult)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.AggregatedResult)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Reporter != nil {
		{
			size, err := m.Reporter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TestCaseResults) > 0 {
		for iNdEx := len(m.TestCaseResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCaseResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataSourceResults) > 0 {
		for iNdEx := len(m.DataSourceResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSourceResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateReportRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateReportRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateReportRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResultStatus) > 0 {
		i -= len(m.ResultStatus)
		copy(dAtA[i:], m.ResultStatus)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.ResultStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AggregatedResult) > 0 {
		i -= len(m.AggregatedResult)
		copy(dAtA[i:], m.AggregatedResult)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.AggregatedResult)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Reporter != nil {
		{
			size, err := m.Reporter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TestCaseResults) > 0 {
		for iNdEx := len(m.TestCaseResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCaseResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataSourceResults) > 0 {
		for iNdEx := len(m.DataSourceResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSourceResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintTxReport(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	if len(m.DataSourceResults) > 0 {
		for _, e := range m.DataSourceResults {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	if len(m.TestCaseResults) > 0 {
		for _, e := range m.TestCaseResults {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	if m.Reporter != nil {
		l = m.Reporter.Size()
		n += 1 + l + sovTxReport(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	l = len(m.AggregatedResult)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	l = len(m.ResultStatus)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	return n
}

func (m *MsgCreateReportRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	if len(m.DataSourceResults) > 0 {
		for _, e := range m.DataSourceResults {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	if len(m.TestCaseResults) > 0 {
		for _, e := range m.TestCaseResults {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	if m.Reporter != nil {
		l = m.Reporter.Size()
		n += 1 + l + sovTxReport(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTxReport(uint64(l))
		}
	}
	l = len(m.AggregatedResult)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	l = len(m.ResultStatus)
	if l > 0 {
		n += 1 + l + sovTxReport(uint64(l))
	}
	return n
}

func sovTxReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxReport(x uint64) (n int) {
	return sovTxReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceResults = append(m.DataSourceResults, &DataSourceResult{})
			if err := m.DataSourceResults[len(m.DataSourceResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCaseResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCaseResults = append(m.TestCaseResults, &TestCaseResult{})
			if err := m.TestCaseResults[len(m.TestCaseResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reporter == nil {
				m.Reporter = &Reporter{}
			}
			if err := m.Reporter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedResult = append(m.AggregatedResult[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatedResult == nil {
				m.AggregatedResult = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateReportRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateReportRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateReportRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceResults = append(m.DataSourceResults, &DataSourceResult{})
			if err := m.DataSourceResults[len(m.DataSourceResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCaseResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCaseResults = append(m.TestCaseResults, &TestCaseResult{})
			if err := m.TestCaseResults[len(m.TestCaseResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reporter == nil {
				m.Reporter = &Reporter{}
			}
			if err := m.Reporter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedResult = append(m.AggregatedResult[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatedResult == nil {
				m.AggregatedResult = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxReport = fmt.Errorf("proto: unexpected end of group")
)
