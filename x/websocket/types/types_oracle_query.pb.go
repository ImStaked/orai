// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: websocket/types/types_oracle_query.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Fetch struct {
	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" json:"url"`
	Method        string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty" json:"method,omitempty"`
	Authorization string `protobuf:"bytes,3,opt,name=authorization,proto3" json:"authorization,omitempty" json:"authorization,omitempty"`
	Body          string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty" json:"body,omitempty"`
}

func (m *Fetch) Reset()         { *m = Fetch{} }
func (m *Fetch) String() string { return proto.CompactTextString(m) }
func (*Fetch) ProtoMessage()    {}
func (*Fetch) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{0}
}
func (m *Fetch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fetch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fetch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fetch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fetch.Merge(m, src)
}
func (m *Fetch) XXX_Size() int {
	return m.Size()
}
func (m *Fetch) XXX_DiscardUnknown() {
	xxx_messageInfo_Fetch.DiscardUnknown(m)
}

var xxx_messageInfo_Fetch proto.InternalMessageInfo

func (m *Fetch) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Fetch) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Fetch) GetAuthorization() string {
	if m != nil {
		return m.Authorization
	}
	return ""
}

func (m *Fetch) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

// Report stores the result of the data source when validator executes it
type Request struct {
	Fetch *Fetch `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty" json:"fetch"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetFetch() *Fetch {
	if m != nil {
		return m.Fetch
	}
	return nil
}

type RequestDataSource struct {
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" json:"input"`
}

func (m *RequestDataSource) Reset()         { *m = RequestDataSource{} }
func (m *RequestDataSource) String() string { return proto.CompactTextString(m) }
func (*RequestDataSource) ProtoMessage()    {}
func (*RequestDataSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{2}
}
func (m *RequestDataSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDataSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDataSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDataSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDataSource.Merge(m, src)
}
func (m *RequestDataSource) XXX_Size() int {
	return m.Size()
}
func (m *RequestDataSource) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDataSource.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDataSource proto.InternalMessageInfo

func (m *RequestDataSource) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type RequestTestCase struct {
	Contract github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=contract,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"contract,omitempty" json:"contract"`
	Input    string                                        `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty" json:"input"`
	Output   string                                        `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty" json:"output"`
}

func (m *RequestTestCase) Reset()         { *m = RequestTestCase{} }
func (m *RequestTestCase) String() string { return proto.CompactTextString(m) }
func (*RequestTestCase) ProtoMessage()    {}
func (*RequestTestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{3}
}
func (m *RequestTestCase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTestCase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTestCase.Merge(m, src)
}
func (m *RequestTestCase) XXX_Size() int {
	return m.Size()
}
func (m *RequestTestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTestCase.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTestCase proto.InternalMessageInfo

func (m *RequestTestCase) GetContract() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *RequestTestCase) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *RequestTestCase) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type RequestOracleScript struct {
	Results []string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" json:"results"`
}

func (m *RequestOracleScript) Reset()         { *m = RequestOracleScript{} }
func (m *RequestOracleScript) String() string { return proto.CompactTextString(m) }
func (*RequestOracleScript) ProtoMessage()    {}
func (*RequestOracleScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{4}
}
func (m *RequestOracleScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestOracleScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestOracleScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestOracleScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestOracleScript.Merge(m, src)
}
func (m *RequestOracleScript) XXX_Size() int {
	return m.Size()
}
func (m *RequestOracleScript) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestOracleScript.DiscardUnknown(m)
}

var xxx_messageInfo_RequestOracleScript proto.InternalMessageInfo

func (m *RequestOracleScript) GetResults() []string {
	if m != nil {
		return m.Results
	}
	return nil
}

type QueryOracleContract struct {
	Contract github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=contract,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"contract,omitempty" json:"contract"`
	Request  *Request                                      `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty" json:"request"`
}

func (m *QueryOracleContract) Reset()         { *m = QueryOracleContract{} }
func (m *QueryOracleContract) String() string { return proto.CompactTextString(m) }
func (*QueryOracleContract) ProtoMessage()    {}
func (*QueryOracleContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{5}
}
func (m *QueryOracleContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleContract.Merge(m, src)
}
func (m *QueryOracleContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleContract proto.InternalMessageInfo

func (m *QueryOracleContract) GetContract() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *QueryOracleContract) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryDataSourceContract struct {
	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"name"`
	Request *RequestDataSource `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty" json:"request"`
}

func (m *QueryDataSourceContract) Reset()         { *m = QueryDataSourceContract{} }
func (m *QueryDataSourceContract) String() string { return proto.CompactTextString(m) }
func (*QueryDataSourceContract) ProtoMessage()    {}
func (*QueryDataSourceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{6}
}
func (m *QueryDataSourceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSourceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSourceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSourceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSourceContract.Merge(m, src)
}
func (m *QueryDataSourceContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSourceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSourceContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSourceContract proto.InternalMessageInfo

func (m *QueryDataSourceContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryDataSourceContract) GetRequest() *RequestDataSource {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryDataSourceSmartContract struct {
	Get *RequestDataSource `protobuf:"bytes,2,opt,name=get,proto3" json:"get,omitempty" json:"get"`
}

func (m *QueryDataSourceSmartContract) Reset()         { *m = QueryDataSourceSmartContract{} }
func (m *QueryDataSourceSmartContract) String() string { return proto.CompactTextString(m) }
func (*QueryDataSourceSmartContract) ProtoMessage()    {}
func (*QueryDataSourceSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{7}
}
func (m *QueryDataSourceSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSourceSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSourceSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSourceSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSourceSmartContract.Merge(m, src)
}
func (m *QueryDataSourceSmartContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSourceSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSourceSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSourceSmartContract proto.InternalMessageInfo

func (m *QueryDataSourceSmartContract) GetGet() *RequestDataSource {
	if m != nil {
		return m.Get
	}
	return nil
}

type QueryTestCaseContract struct {
	Name           string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"name"`
	DataSourceName string           `protobuf:"bytes,2,opt,name=dataSourceName,proto3" json:"dataSourceName,omitempty" json:"dsource_name"`
	Request        *RequestTestCase `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty" json:"request"`
}

func (m *QueryTestCaseContract) Reset()         { *m = QueryTestCaseContract{} }
func (m *QueryTestCaseContract) String() string { return proto.CompactTextString(m) }
func (*QueryTestCaseContract) ProtoMessage()    {}
func (*QueryTestCaseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{8}
}
func (m *QueryTestCaseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTestCaseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTestCaseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTestCaseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTestCaseContract.Merge(m, src)
}
func (m *QueryTestCaseContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryTestCaseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTestCaseContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTestCaseContract proto.InternalMessageInfo

func (m *QueryTestCaseContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryTestCaseContract) GetDataSourceName() string {
	if m != nil {
		return m.DataSourceName
	}
	return ""
}

func (m *QueryTestCaseContract) GetRequest() *RequestTestCase {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryTestCaseSmartContract struct {
	Test *RequestTestCase `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty" json:"test"`
}

func (m *QueryTestCaseSmartContract) Reset()         { *m = QueryTestCaseSmartContract{} }
func (m *QueryTestCaseSmartContract) String() string { return proto.CompactTextString(m) }
func (*QueryTestCaseSmartContract) ProtoMessage()    {}
func (*QueryTestCaseSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{9}
}
func (m *QueryTestCaseSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTestCaseSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTestCaseSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTestCaseSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTestCaseSmartContract.Merge(m, src)
}
func (m *QueryTestCaseSmartContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryTestCaseSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTestCaseSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTestCaseSmartContract proto.InternalMessageInfo

func (m *QueryTestCaseSmartContract) GetTest() *RequestTestCase {
	if m != nil {
		return m.Test
	}
	return nil
}

type QueryOracleScriptContract struct {
	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"name"`
	Request *RequestOracleScript `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty" json:"request"`
}

func (m *QueryOracleScriptContract) Reset()         { *m = QueryOracleScriptContract{} }
func (m *QueryOracleScriptContract) String() string { return proto.CompactTextString(m) }
func (*QueryOracleScriptContract) ProtoMessage()    {}
func (*QueryOracleScriptContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{10}
}
func (m *QueryOracleScriptContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleScriptContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleScriptContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleScriptContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleScriptContract.Merge(m, src)
}
func (m *QueryOracleScriptContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleScriptContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleScriptContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleScriptContract proto.InternalMessageInfo

func (m *QueryOracleScriptContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryOracleScriptContract) GetRequest() *RequestOracleScript {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryOracleScriptSmartContract struct {
	Aggregate *RequestOracleScript `protobuf:"bytes,2,opt,name=aggregate,proto3" json:"aggregate,omitempty" json:"aggregate"`
}

func (m *QueryOracleScriptSmartContract) Reset()         { *m = QueryOracleScriptSmartContract{} }
func (m *QueryOracleScriptSmartContract) String() string { return proto.CompactTextString(m) }
func (*QueryOracleScriptSmartContract) ProtoMessage()    {}
func (*QueryOracleScriptSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{11}
}
func (m *QueryOracleScriptSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleScriptSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleScriptSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleScriptSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleScriptSmartContract.Merge(m, src)
}
func (m *QueryOracleScriptSmartContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleScriptSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleScriptSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleScriptSmartContract proto.InternalMessageInfo

func (m *QueryOracleScriptSmartContract) GetAggregate() *RequestOracleScript {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

// Report stores the result of the data source when validator executes it
type ResponseContract struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" json:"data"`
}

func (m *ResponseContract) Reset()         { *m = ResponseContract{} }
func (m *ResponseContract) String() string { return proto.CompactTextString(m) }
func (*ResponseContract) ProtoMessage()    {}
func (*ResponseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb374646b98cafd0, []int{12}
}
func (m *ResponseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseContract.Merge(m, src)
}
func (m *ResponseContract) XXX_Size() int {
	return m.Size()
}
func (m *ResponseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseContract.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseContract proto.InternalMessageInfo

func (m *ResponseContract) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Fetch)(nil), "oraichain.orai.websocket.Fetch")
	proto.RegisterType((*Request)(nil), "oraichain.orai.websocket.Request")
	proto.RegisterType((*RequestDataSource)(nil), "oraichain.orai.websocket.RequestDataSource")
	proto.RegisterType((*RequestTestCase)(nil), "oraichain.orai.websocket.RequestTestCase")
	proto.RegisterType((*RequestOracleScript)(nil), "oraichain.orai.websocket.RequestOracleScript")
	proto.RegisterType((*QueryOracleContract)(nil), "oraichain.orai.websocket.QueryOracleContract")
	proto.RegisterType((*QueryDataSourceContract)(nil), "oraichain.orai.websocket.QueryDataSourceContract")
	proto.RegisterType((*QueryDataSourceSmartContract)(nil), "oraichain.orai.websocket.QueryDataSourceSmartContract")
	proto.RegisterType((*QueryTestCaseContract)(nil), "oraichain.orai.websocket.QueryTestCaseContract")
	proto.RegisterType((*QueryTestCaseSmartContract)(nil), "oraichain.orai.websocket.QueryTestCaseSmartContract")
	proto.RegisterType((*QueryOracleScriptContract)(nil), "oraichain.orai.websocket.QueryOracleScriptContract")
	proto.RegisterType((*QueryOracleScriptSmartContract)(nil), "oraichain.orai.websocket.QueryOracleScriptSmartContract")
	proto.RegisterType((*ResponseContract)(nil), "oraichain.orai.websocket.ResponseContract")
}

func init() {
	proto.RegisterFile("websocket/types/types_oracle_query.proto", fileDescriptor_eb374646b98cafd0)
}

var fileDescriptor_eb374646b98cafd0 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x4f, 0x13, 0x4f,
	0x18, 0x66, 0x69, 0x81, 0x1f, 0x2f, 0xdf, 0x0b, 0x84, 0xc2, 0xcf, 0xec, 0xe2, 0x98, 0x18, 0x08,
	0xb4, 0x4d, 0xe0, 0x46, 0x62, 0x0c, 0x05, 0xbf, 0x0e, 0x42, 0x5c, 0x4c, 0xfc, 0x3a, 0xe0, 0x74,
	0x3b, 0x6e, 0x57, 0xba, 0x9d, 0x32, 0x33, 0x1b, 0xad, 0x57, 0xff, 0x01, 0x8f, 0xde, 0x34, 0xf1,
	0x9f, 0xf1, 0x60, 0x0c, 0x47, 0x0f, 0xba, 0x31, 0xf0, 0x1f, 0xec, 0xd1, 0x93, 0xd9, 0x99, 0x69,
	0xbb, 0xad, 0x41, 0x3e, 0x12, 0x2f, 0xed, 0xe4, 0xfd, 0x78, 0xde, 0xe7, 0x79, 0xf6, 0xdd, 0x1d,
	0x58, 0x7a, 0x45, 0xca, 0x9c, 0xba, 0x07, 0x44, 0x14, 0x45, 0xb3, 0x41, 0xb8, 0xfa, 0xdd, 0xa7,
	0x0c, 0xbb, 0x35, 0xb2, 0x7f, 0x18, 0x12, 0xd6, 0x2c, 0x34, 0x18, 0x15, 0xd4, 0xcc, 0x51, 0x86,
	0x7d, 0xb7, 0x8a, 0xfd, 0x7a, 0x21, 0x39, 0x15, 0xda, 0x8d, 0x0b, 0x33, 0x1e, 0xf5, 0xa8, 0x2c,
	0x2a, 0x26, 0x27, 0x55, 0x8f, 0x7e, 0x18, 0x30, 0x70, 0x9b, 0x08, 0xb7, 0x6a, 0x2e, 0x42, 0x26,
	0x64, 0xb5, 0x9c, 0xb1, 0x68, 0x2c, 0x0d, 0x97, 0xc6, 0xe3, 0xc8, 0x86, 0x97, 0x9c, 0xd6, 0x37,
	0x50, 0xc8, 0x6a, 0xc8, 0x49, 0x52, 0xe6, 0x3a, 0x0c, 0x06, 0x44, 0x54, 0x69, 0x25, 0xd7, 0x2f,
	0x8b, 0xfe, 0x8f, 0x23, 0x7b, 0x4e, 0x15, 0xa9, 0xf8, 0x2a, 0x0d, 0x7c, 0x41, 0x82, 0x86, 0x68,
	0x22, 0x47, 0x97, 0x9a, 0x77, 0x61, 0x0c, 0x87, 0xa2, 0x4a, 0x99, 0xff, 0x06, 0x0b, 0x9f, 0xd6,
	0x73, 0x19, 0xd9, 0x8b, 0xe2, 0xc8, 0xb6, 0x54, 0x6f, 0x57, 0x3a, 0x0d, 0xd1, 0xdd, 0x68, 0xe6,
	0x21, 0x5b, 0xa6, 0x95, 0x66, 0x2e, 0x2b, 0x01, 0xe6, 0xe3, 0xc8, 0x9e, 0x55, 0x00, 0x49, 0x34,
	0xdd, 0x27, 0xcb, 0x36, 0xb2, 0xef, 0x3f, 0xda, 0x06, 0x7a, 0x0c, 0x43, 0x0e, 0x39, 0x0c, 0x09,
	0x17, 0xe6, 0x1d, 0x18, 0x78, 0x91, 0x28, 0x95, 0x12, 0x47, 0xd6, 0xec, 0xc2, 0x69, 0x56, 0x15,
	0xa4, 0x21, 0xa5, 0xc9, 0x38, 0xb2, 0x47, 0xd5, 0x04, 0xd9, 0x87, 0x1c, 0xd5, 0xaf, 0x91, 0x37,
	0x61, 0x4a, 0x23, 0x6f, 0x63, 0x81, 0xf7, 0x68, 0xc8, 0x5c, 0x62, 0x5e, 0x87, 0x01, 0xbf, 0xde,
	0x08, 0x85, 0xb6, 0x31, 0x05, 0x21, 0xc3, 0xc8, 0x51, 0x69, 0x0d, 0xf1, 0xc5, 0x80, 0x09, 0x8d,
	0xf1, 0x90, 0x70, 0xb1, 0x85, 0x39, 0x31, 0x9f, 0xc3, 0x7f, 0x2e, 0xad, 0x0b, 0x86, 0x5d, 0x05,
	0x32, 0x5a, 0xda, 0x8e, 0x23, 0x7b, 0x42, 0x81, 0xb4, 0x32, 0xe8, 0x57, 0x64, 0xe7, 0x3d, 0x5f,
	0x54, 0xc3, 0x72, 0xc1, 0xa5, 0x41, 0xd1, 0xa5, 0x3c, 0xa0, 0x5c, 0xff, 0xe5, 0x79, 0xe5, 0x40,
	0x2d, 0x48, 0x61, 0xd3, 0x75, 0x37, 0x2b, 0x15, 0x46, 0x38, 0x77, 0xda, 0xa8, 0x1d, 0x8e, 0xfd,
	0x7f, 0xe5, 0x68, 0x2e, 0xc3, 0x20, 0x0d, 0x45, 0x52, 0xa8, 0x1e, 0xd9, 0x54, 0x1c, 0xd9, 0x63,
	0xaa, 0x50, 0xc5, 0x91, 0xa3, 0x0b, 0xb4, 0x9c, 0x7b, 0x30, 0xad, 0xd5, 0xec, 0xca, 0xc5, 0xdc,
	0x73, 0x99, 0xdf, 0x10, 0xe6, 0x2a, 0x0c, 0x31, 0xc2, 0xc3, 0x9a, 0xe0, 0x39, 0x63, 0x31, 0xb3,
	0x34, 0x5c, 0x32, 0xe3, 0xc8, 0x1e, 0x57, 0x40, 0x3a, 0x81, 0x9c, 0x56, 0x89, 0x86, 0xfa, 0x6a,
	0xc0, 0xf4, 0x83, 0x64, 0xad, 0x15, 0xd2, 0x56, 0x8b, 0xfb, 0xbf, 0x77, 0x67, 0x37, 0x61, 0x2b,
	0x45, 0x48, 0x7f, 0x46, 0xd6, 0xae, 0x9e, 0xbe, 0x27, 0x5a, 0x6d, 0xb7, 0x20, 0x19, 0x92, 0x82,
	0xe4, 0x49, 0x0b, 0xfa, 0x60, 0xc0, 0x9c, 0x14, 0xd4, 0x59, 0x96, 0xb6, 0xa8, 0x6b, 0x90, 0xad,
	0xe3, 0x80, 0xe8, 0x9d, 0x99, 0x88, 0x23, 0x7b, 0x44, 0x81, 0x25, 0x51, 0xe4, 0xc8, 0xa4, 0xf9,
	0xa4, 0x97, 0xd7, 0xca, 0x99, 0xbc, 0x3a, 0xa3, 0xce, 0xc3, 0x30, 0x80, 0x2b, 0x3d, 0x04, 0xf7,
	0x02, 0xcc, 0x44, 0x9b, 0xe5, 0x7d, 0xc8, 0x78, 0xe4, 0x52, 0xc3, 0x53, 0x1f, 0x13, 0x8f, 0x08,
	0xe4, 0x24, 0x38, 0xe8, 0xbb, 0x01, 0xb3, 0x72, 0x5e, 0x6b, 0xf3, 0x2f, 0x66, 0xc7, 0x4d, 0x18,
	0xaf, 0xb4, 0x27, 0xec, 0x24, 0xe5, 0x6a, 0x9b, 0xe7, 0xe2, 0xc8, 0x9e, 0x56, 0xe5, 0x15, 0x2e,
	0x93, 0xfb, 0xaa, 0xad, 0xa7, 0xdc, 0x7c, 0xd4, 0xf1, 0x33, 0x23, 0x25, 0x2d, 0x9f, 0x29, 0xa9,
	0xc5, 0xf4, 0x3c, 0x6e, 0xd6, 0x60, 0xa1, 0x4b, 0x5d, 0xb7, 0x97, 0x3b, 0x90, 0x15, 0x9d, 0x27,
	0x79, 0x81, 0xc9, 0x29, 0x37, 0x84, 0x1c, 0x2b, 0x71, 0xd0, 0x27, 0x03, 0xe6, 0x53, 0xaf, 0x8b,
	0x7a, 0xf1, 0x2e, 0x66, 0xe8, 0xb3, 0xde, 0xfd, 0xca, 0x9f, 0xc9, 0x2a, 0x3d, 0xec, 0x3c, 0x9e,
	0xbc, 0x35, 0xc0, 0xfa, 0x83, 0x65, 0xb7, 0x31, 0x18, 0x86, 0xb1, 0xe7, 0x31, 0xe2, 0x61, 0x41,
	0x2e, 0xc7, 0x63, 0x26, 0x8e, 0xec, 0x49, 0x7d, 0xb1, 0xb4, 0x90, 0x90, 0xd3, 0x41, 0x45, 0x37,
	0x60, 0xd2, 0x21, 0xbc, 0x41, 0xeb, 0xdd, 0x2b, 0x97, 0xac, 0x87, 0xfe, 0xa4, 0xa4, 0x1c, 0x4a,
	0xa2, 0xc8, 0x91, 0x49, 0x25, 0xa2, 0x74, 0xeb, 0xf3, 0xb1, 0x65, 0x1c, 0x1d, 0x5b, 0xc6, 0xcf,
	0x63, 0xcb, 0x78, 0x77, 0x62, 0xf5, 0x1d, 0x9d, 0x58, 0x7d, 0xdf, 0x4e, 0xac, 0xbe, 0xa7, 0x2b,
	0xa9, 0x4f, 0x4e, 0x9b, 0xb2, 0x3c, 0x15, 0x5f, 0x17, 0x7b, 0x2e, 0xf0, 0xf2, 0xa0, 0xbc, 0x7e,
	0xd7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xf3, 0xb0, 0x9e, 0xda, 0x07, 0x00, 0x00,
}

func (m *Fetch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Authorization) > 0 {
		i -= len(m.Authorization)
		copy(dAtA[i:], m.Authorization)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Authorization)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fetch != nil {
		{
			size, err := m.Fetch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDataSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDataSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDataSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestTestCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTestCase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTestCase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestOracleScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestOracleScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOracleScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Results[iNdEx])
			copy(dAtA[i:], m.Results[iNdEx])
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Results[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSourceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSourceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSourceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSourceSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSourceSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSourceSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Get != nil {
		{
			size, err := m.Get.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryTestCaseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTestCaseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTestCaseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataSourceName) > 0 {
		i -= len(m.DataSourceName)
		copy(dAtA[i:], m.DataSourceName)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.DataSourceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTestCaseSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTestCaseSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTestCaseSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Test != nil {
		{
			size, err := m.Test.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleScriptContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleScriptContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleScriptContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleScriptSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleScriptSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleScriptSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesOracleQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ResponseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypesOracleQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesOracleQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesOracleQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Fetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.Authorization)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fetch != nil {
		l = m.Fetch.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *RequestDataSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *RequestTestCase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *RequestOracleScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			l = len(s)
			n += 1 + l + sovTypesOracleQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOracleContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSourceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSourceSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Get != nil {
		l = m.Get.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryTestCaseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	l = len(m.DataSourceName)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryTestCaseSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Test != nil {
		l = m.Test.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleScriptContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleScriptSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func (m *ResponseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypesOracleQuery(uint64(l))
	}
	return n
}

func sovTypesOracleQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesOracleQuery(x uint64) (n int) {
	return sovTypesOracleQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fetch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fetch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fetch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fetch == nil {
				m.Fetch = &Fetch{}
			}
			if err := m.Fetch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDataSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDataSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDataSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTestCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTestCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTestCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract[:0], dAtA[iNdEx:postIndex]...)
			if m.Contract == nil {
				m.Contract = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestOracleScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestOracleScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestOracleScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract[:0], dAtA[iNdEx:postIndex]...)
			if m.Contract == nil {
				m.Contract = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &Request{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSourceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSourceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSourceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RequestDataSource{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSourceSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSourceSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSourceSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Get", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Get == nil {
				m.Get = &RequestDataSource{}
			}
			if err := m.Get.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTestCaseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTestCaseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTestCaseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RequestTestCase{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTestCaseSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTestCaseSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTestCaseSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Test == nil {
				m.Test = &RequestTestCase{}
			}
			if err := m.Test.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleScriptContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleScriptContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleScriptContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RequestOracleScript{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleScriptSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleScriptSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleScriptSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregate == nil {
				m.Aggregate = &RequestOracleScript{}
			}
			if err := m.Aggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesOracleQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesOracleQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesOracleQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesOracleQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesOracleQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesOracleQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesOracleQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesOracleQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesOracleQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesOracleQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesOracleQuery = fmt.Errorf("proto: unexpected end of group")
)
